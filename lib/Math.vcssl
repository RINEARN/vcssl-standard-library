/**
 * <p>
 * VCSSL Math ライブラリ は、数学関数を提供するための標準ライブラリです。
 * <br />
 * 具体的には、指数関数、対数関数、平方根と累乗根、階乗、三角関数、逆三角関数、双曲線関数、逆双曲線関数、絶対値と最大最小値関数などが挙げられます。
 * </p>
 * 
 * <p>
 * このライブラリでは、64bit-float (いわゆるdouble) 精度と多倍長精度の数学関数が提供されます。前者は float 型、後者は varfloat 型として扱います。
 * <br />
 * VCSSLにおける float 型は double 型と区別されず、共に処理系によって定義される精度を持ち、現在の公式実装では IEEE754 の 64-bit float となっています。
 * <br />
 * varfloat 型については、現在の公式実装では統一規格では無く、
 * 10進 任意精度の独自仕様が採用されてます。丸めは10進における切り捨てによって処理されます。
 * <br />
 * varfloat型の詳細仕様は処理系依存であり、将来的には何らかの統一規格に変更される可能性があります。
 * </p>
 * 
 * <p>
 * float (double) 実装の数学関数については、処理系側の組み込みの機能が使用され、実行時に特殊な演算命令の一種に展開されて扱われます。
 * <br />
 * Math ライブラリが提供する float 実装の数学関数の多くは、そういった特殊な演算命令をラッピングした関数マクロです。
 * <br />
 * そのため、関数コールのオーバーヘッドが無く、概ね良好なパフォーマンスを発揮します。
 * </p>
 * <p>
 * それに対して varfloat (多倍長) 実装の数学関数については、VCSSL のコードとして実装されています。
 * <br />
 * 具体的には、マクローリン展開やテイラー展開、ニュートン法、ガウス=ルジャンドル法などによって、
 * 値を求める計算アルゴリズムが、全て VCSSL で varfloat 型を用いて実装されています。
 * <br />
 * このため、処理速度は一般に低速の部類に入ります。これは、スクリプト言語による実装である事や、そもそも varfloat 型の演算速度が低速である事などに起因します。
 * <br />
 * 具体的な例として、sin(1) の値を有効桁数 1000 桁で計算するコードは以下のようになります。この計算では sin 関数に 1 秒弱の処理時間を要します。
 * <div class="code">
 * digit( 1000 ); // 有効桁数を 1000 桁に設定
 * <br />
 * varfloat value = sin( 1.0vf ); // sin 関数を計算
 * <br />
 * print( value ); // 出力
 * </div>
 * </p>
 *
 * <p>
 * varfloat (多倍長) 実装の数学関数では、多くが収束アルゴリズムに依存しているため、末尾の、ある程度の桁数に誤差蓄積が生じる場合があります。
 * <br />
 * この事を見越して、数学関数の内部では、数割程度（関数によって異なります）大きい桁数で計算し、値を返す時点で余剰桁を切り捨てるようになっています。
 * <br />
 * ただし、これはあくまで補助的なものであり、あらゆる有効桁数と引数に対して、常に誤差蓄積の桁が排除される事を保証するものではありません。
 * <br />
 * 関数にもよりますが、誤差蓄積の検証は、一般に数十桁程度の有効桁数による用途と、常用的な範囲の引数を想定して行われています。
 * <br />
 * 数千から数万桁の用途や、特異点近傍の引数については、一般に誤差蓄積が大きくなるため、切り捨てる余剰桁に収まらず、関数の戻り値の末尾にも現れる場合があります。
 * <br />
 * 従って、そうした用途では、呼び出し側でも誤差蓄積を考慮した大きめの有効桁数で使用し、余剰桁を切り捨てるなどの措置を行ってください。
 * </p>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */



/*
# ====================================================================================================
# 
# PRAGMA COMPILE    DYNAMIC_REFERRED
# PRAGMA COMPILE    STATIC_REFERRED
# PRAGMA RESERVE    NOT_REFERRED
# 
# PRAGMA INTERNAL   RINEARN  {
#     
#     MAINSTREAM    { "R4***",    "OR_LATER" }
#     COMPATIBLE    { "R3***",    "R2***",    "R1***" }
#     
#     SYSTEMCALL    { "SYSTEM_PROCESS_FPU_*" }
#     INTERFACE     { "GPCI",         "DPCI" }
#     
#     CONNECT       { "ONLOAD",   "STATIC",   "rxvesapi.process.driver.MathProcessDriver"   }
#     ARCHIVE       { "ONBUILD",  "STATIC",   "rxvesapi.process.library.MathProcessLibrary" }
#     
# }
# 
# PRAGMA INTERNAL   END
# PRAGMA END
# 
# ====================================================================================================
*/



/** float精度における、円周率の値です。多倍長精度の varfloat 値を得るには <a href="#pi">pi</a>() を使用してください。 */
const float PI = 3.141592653589793 ;

/** float精度における、ネイピア数（自然対数の底）の値です。多倍長精度の varfloat 値を得るには <a href="#exp">exp</a>( 1.0vf ) で計算してください。 */
const float E = 2.718281828459045 ;


/** エラーメッセージ、入力値が定義域の範囲外だった場合。 */
private const string ERROR_OUT_OF_DEFINITION = "入力値が定義域の範囲外です。" ;


/*
 * float値が NaN かどうか判定します。
 *
 * @param arg 判定対象の値。
 * @return (bool) NaN であれば true 、そうでなければ false 。
 */
macro nan( float arg ){
	return SYSTEM_PROCESS_FPU_nanF( arg );
}


/*
 * float値が Inf かどうか判定します。
 *
 * @param arg 判定対象の値。
 * @return (bool) Inf であれば true 、そうでなければ false 。
 */
macro inf( float arg ){
	return SYSTEM_PROCESS_FPU_infF( arg );
}



// これらは System ライブラリに移動されました。
macro bin( int number ){
	return SYSTEM_PROCESS_FPU_binary( number );
}
macro oct( int number ){
	return SYSTEM_PROCESS_FPU_octal( number );
}
macro hex( int number ){
	return SYSTEM_PROCESS_FPU_hex( number );
}



/*
 * int値に対して、ビットごとのAND（論理積）演算を計算します。
 *
 * @param number1 演算対象の値
 * @param number2 演算対象の値
 * @param (int) 計算結果の値
 */
macro and( int number1, int number2 ){
	return SYSTEM_PROCESS_FPU_and( number1, number2 );
}


/*
 * int値に対して、ビットごとのOR（論理和）演算を計算します。
 *
 * @param number1 演算対象の値
 * @param number2 演算対象の値
 * @param (int) 計算結果の値
 */
macro or( int number1, int number2 ){
	return SYSTEM_PROCESS_FPU_or( number1, number2 );
}


/*
 * int値に対して、ビットごとのXOR（排他的論理和）演算を計算します。
 *
 * @param number1 演算対象の値
 * @param number2 演算対象の値
 * @param (int) 計算結果の値
 */
macro xor( int number1, int number2 ){
	return SYSTEM_PROCESS_FPU_xor( number1, number2 );
}





/**
 * 0.0以上1.0未満の値を返します。なお、VCSSL3.0.20以前のドキュメントにおいて「0.0 から 1.0 までの乱数値を返します。」と記載されていましたが、この表現は曖昧であり、実際には1.0に完全に一致する値が返される事はありません。
 *
 * @return (float) 乱数値
 */
macro random(){
	return SYSTEM_PROCESS_FPU_rand();
}

/**
 * randomと同様です。現在はrandomの使用が推奨されます。この関数の名称は、整数型の乱数と混同を招くため、現在の使用は推奨されません。将来的に、この関数の型の変更が検討される可能性があります。
 *
 * @return (float) 乱数値
 */
macro rand(){
	return SYSTEM_PROCESS_FPU_rand();
}












/**
 * 円周率の値を計算します。
 * <br />
 * 内部では、元の桁数の1.1倍の桁数で、ガウス=ルジャンドル法によって計算されます。
 * <br />
 * 高精度な円周率の値は、周期性がある関数の計算や、周期境界をもつシミュレーション（回転系や写像系など）において、引数や座標の円周率による剰余を求めるために必要となります。
 * 実際に Math ライブラリでも、varfloat型の三角関数を求める計算などで使用されています。
 *
 * @return 円周率の値。
 * 
 */
varfloat pi(){
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( digitStock * 1.1 );
	if( digitStock <= 100 ){
		digit( digitStock + 10 );
	}
	
	// 初期値設定
	varfloat value = 0.0vf;
	varfloat a = 1.0vf;
	varfloat b;
	varfloat a_stock = 0.0vf;
	varfloat b_stock = 0.0vf;
	varfloat c = 0.25vf;
	varfloat d = 1vf;
	varfloat sqrt_value;
	varfloat sqrt_value_stock = -1.0vf;
	varfloat sqrt_inv = 0.5vf;
	varfloat sqrt_arg = 0.0vf;
	
	// まずルート1/2の値を計算して b にセット
	sqrt_value = 0.7071067811865475vf;
	sqrt_arg = 0.5vf;
	sqrt_value_stock = -1.0vf;
	while( sqrt_value != sqrt_value_stock ){
		sqrt_value_stock = sqrt_value;
		sqrt_value += sqrt_arg / sqrt_value;
		sqrt_value *= sqrt_inv;
	}
	b = sqrt_value;
	
	// すぐ後で書き換える暫定値
	sqrt_value = 0.8408964152537145vf;
	
	// 収束するまでガウス=ルジャンドル法で計算
	while( a != a_stock && b != b_stock ){
		
		// 収束判定のために値を控える
		a_stock = a;
		b_stock = b;
		
		// a と、b のルート内に入る値 sqrt_arg を更新
		a = ( a_stock + b_stock )*0.5vf;
		sqrt_arg = a_stock*b_stock;
		
		// ルート sqrt_arg の値を計算して b を更新
		sqrt_value_stock = -1.0vf;
		while( sqrt_value != sqrt_value_stock ){
			sqrt_value_stock = sqrt_value;
			sqrt_value += sqrt_arg / sqrt_value;
			sqrt_value *= sqrt_inv;
		}
		b = sqrt_value;
		
		// c, d の値を更新
		c = c - d*( a - a_stock )*( a - a_stock );
		d = 2.0vf*d;
	}
	
	// 収束値の組から円周率に変換
	value = (a+b)*(a+b) / (4.0vf*c);
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}








/**
 * ネイピア数を低とする指数関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro exp( float arg ){
	return SYSTEM_PROCESS_FPU_exp( arg );
}

/**
 * ネイピア数を低とする指数関数を計算します。
 * <br />
 * 内部では、元の桁数の 1.34 倍の桁数で、マクローリン展開によって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。
 * この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varfloat exp( varfloat arg ){
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// 初期値設定
	varfloat value = 1.0vf;
	varfloat value_stock = -500.0vf;
	varfloat powor = 1.0vf;
	varfloat term;
	varint factorial = 1v;
	varint i = 1v;
	varint fac;
	
	// 値が収束するまで展開項を加算
	while( value != value_stock ){
		value_stock = value;
		powor = powor * arg;
		factorial = factorial * i;
		term = powor / factorial;
		value += term;
		i++;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}






/**
 * 指数関数を計算します。
 *
 * @param arg1 低。
 * @param arg2 指数。
 * @return (float) 計算結果の値。
 */
macro pow( float arg1, float arg2 ){
	return SYSTEM_PROCESS_FPU_pow( arg1, arg2 );
}

/**
 * 指数が整数の指数関数を計算します。
 * <br />
 * 内部では、「 元の桁数 + 指数 ( arg2 ) のオーダーの絶対値 」の2.1倍の桁数で、乗算の繰り返しによって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。
 * この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg1 低。
 * @param arg2 指数。
 * @return 計算結果の値。
 */
varfloat pow( varfloat arg1, varint arg2 ){
	
	// 演算結果となる変数
	varfloat value;
	
	// 0乗は常に1なので計算せず1を返す
	if( arg2 == 0vf ){
		value = 1vf;
		return value;
	}
	
	// 1乗は値が変化しないのでそのまま返す
	if( arg2 == 1vf ){
		value = arg1;
		return value;
	}
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( (int)( ( digitStock + abs( order( (varfloat)arg2 ) ) )* 2.1vf )	);
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// マイナス乗はプラス乗で計算し、後で変換する
	boolean plus = true;
	if( arg2 < 0vf ){
		plus = false;
		arg2 = -arg2;
	}
	
	// 初期値設定
	varint n = arg2-1v;
	varfloat p = arg1;
	value = arg1;
	
	// 指数の回数だけ乗算を繰り返す
	for( varint i=0v; i<n; i++ ){
		value = value * p;
	}
	
	// マイナス乗だった場合は1/プラス乗に変換
	if( !plus ){
		value = 1.0vf / value;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}

/**
 * 指数が浮動小数点数（実数）の指数関数を計算します。
 * <br />
 * 内部では、「 元の桁数 + 指数 ( arg2 ) のオーダーの絶対値 」の1.2倍の桁数で、
 + マクローリン展開もしくは指数関数と対数関数の組み合わせによって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。
 * この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg1 低。
 * @param arg2 指数。
 * @return 計算結果の値。
 */
varfloat pow( varfloat arg1, varfloat arg2 ){
	
	// 演算結果となる変数
	varfloat value;
	
	// 0乗は常に1なので計算せず1を返す
	if( arg2 == 0vf ){
		value = 1vf;
		return value;
	}
	
	// 1乗は値が変化しないのでそのまま返す
	if( arg2 == 1vf ){
		value = arg1;
		return value;
	}
	
	// 2乗は素直に計算した方が高速なので、直接2乗して返す
	if( arg2 == 2vf ){
		value = arg1*arg1;
		return value;
	}
	
	// マイナス乗はプラス乗で計算し、後で変換する
	boolean plus = true;
	if( arg2 < 0vf ){
		plus = false;
		arg2 = -arg2;
	}
	
	// 現時点の演算桁数を控えておく
	int digitStock = getdigit();
	
	// 指数が整数の場合は pow 関数を呼ぶ
	varfloat mod = arg2 % 1vf;
	boolean integerPowor = ( mod == 0vf );
	if( integerPowor ){
		
		// 精度を出すために演算桁数を増加
		digit(	(int)( (digitStock+abs( order(arg2) ))* 1.2vf )	);
		if( digitStock <= 10 ){
			digit( digitStock + 4 );
		}
		
		// pow 関数では単純に繰り返し乗算されるため、より高速
		varint intarg2 = arg2;
		value = pow( arg1, intarg2 );
	}
	
	// もし指数が分数だった場合、高速計算できるため確認
	boolean root = false;
	if( !integerPowor && arg2 < 1vf ){
		
		// 分数の逆数は整数になる
		varfloat rootinv;
		varfloat one = 1vf;
		
		// 2以上10以下を分母とする分数と、指数が一致するかどうか確認する
		for( varint i=2v; i<=10v; i++ ){
			
			// 分数の値
			rootinv = one / arg2;
			
			// 指数が分数と一致した場合
			if( arg2 == rootinv ){
				
				// 精度を出すために演算桁数を増加
				digit( digitStock * 1.34 );
				if( digitStock <= 10 ){
					digit( digitStock + 4 );
				}
				
				// 初期値設定
				value = 1.0vf;
				varint p = arg2;
				varint p_m1;
				varfloat value_stock = 2.0vf;
				varfloat inv = 0.5vf;
				varfloat m;
				varfloat c;
				
				// 指数が整数の pow 関数を使ってマクローリン展開
				while( value != value_stock ){
					value_stock = value;
					c = pow( value, p ) - arg1;
					p_m1 = p-1v;
					m = p * pow( value, p_m1 );
					value -=	c / m;
				}
				root = true;
				break;
			}
		}
	}
	
	// 指数が単純でない場合、指数関数と対数関数を組み合わせて計算
	if( !integerPowor && !root ){
		
		// 精度を出すために演算桁数を増加
		digit( digitStock * 2.1 );
		if( digitStock <= 10 ){
			digit( digitStock + 4 );
		}
		
		// 数学的に ln( arg1**arg2 ) == arg2 * ln(arg1) なので、
		// 両辺を exp して value == arg1**arg2 == exp(arg2 * ln(arg1)) になる
		varfloat buff = arg2 * ln( arg1 );
		value = exp( buff );
	}
	
	// マイナス乗だった場合は1/プラス乗に変換
	if( !plus ){
		digit( digitStock * 2.1	);
		value = 1.0vf / value;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}

/**
 * 指数関数を計算します。
 * <br />
 * 内部では、arg1 を varfloat 型にキャストした上で、 pow( varfloat, varfloat ) が使用されます。
 *
 * @param arg1 低。
 * @param arg2 指数。
 * @return 計算結果の値。
 */
varfloat pow( varint arg1, varfloat arg2 ){
	varfloat vfarg = (varfloat)arg1;
	varfloat value = pow( vfarg, arg2 );
	return value;
}













/**
 * 自然対数を計算します。log と同じです。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro ln( float arg ){
	return SYSTEM_PROCESS_FPU_ln( arg );
}

/**
 * 自然対数を計算します。log と同じです。
 * <br />
 * 内部ではそのまま log(varfloat) が使用されています。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
macro ln( varfloat arg ){
	return log( arg );
}





/**
 * 自然対数を計算します。ln と同じです。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro log( float arg ){
	return SYSTEM_PROCESS_FPU_ln( arg );
}

/**
 * 自然対数を計算します。ln と同じです。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、「 1以上の引数ではニュートン法、1以下の引数ではテイラー展開 」によって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。
 * この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varfloat log( varfloat arg ){
	
	// log(1) は 常に 0 なのですぐ 0 を返す
	if( 1vf == arg ){
		return 0vf;
	}
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// 演算結果を格納する変数と、収束判定用の変数
	varfloat value;
	varfloat valueStock;
	
	// 引数が 1 より大きい場合はニュートン法で計算する
	if( 1.0vf < arg ){
		
		// 収束の高速化のため、なるべく結果に近い出発点を求めたい
		varint order = 0v;   // まず arg が10の何乗くらいか求める
		varfloat vf = 1.0vf; // それを求めるための判定変数
		while( vf < arg ){
			order += 1v;
			vf *= 10.0vf;
		}
		
		// ざっくりと arg を 10**oder 程度のスケールと見積もると、
		// 近似的に value = log(arg) = log(10**order) = order*log(10) なので、
		// それを初期値にするとプラマイ1桁くらいの位置から収束開始できて速い
		value = order * 2.302585092994046vf;
		valueStock = 0.0vf;
		
		// 収束するまでニュートン法で飛ばし続ける
		varfloat buff;
		varfloat term;
		while( value != valueStock ){
			valueStock = value;
			value = (arg/exp( value )) + value - 1vf;
		}
	}
	
	// 引数が 1 より小さい場合はマクローリン展開によって計算する
	if( arg < 1vf ){
		
		// arg = x + 1 とおき、log( x + 1 ) のマクローリン展開を行う
		varfloat x = arg - 1vf;
		
		// 初期値設定
		value = 0vf;        // 演算結果を格納する変数
		valueStock = -1vf;  // 収束判定用の変数
		varint n = 1v;      // 和のインデックス
		varfloat xn = -1vf; // x の n 乗を控える変数（1回ごとに符号反転）
		
		// 毎回加算する展開項
		varfloat term = 1vf;
		
		// 収束するまでマクローリン展開の項を加算し続ける
		while (value != valueStock) {
			valueStock = value;
			xn *= -x;
			term = xn / n;
			value = value + term;
			n++;
		}
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}








/**
 * 常用対数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro log10( float arg ){
	return SYSTEM_PROCESS_FPU_log10( arg );
}

/**
 * 常用対数を計算します。
 * <br />
 * 内部では、元の桁数の2.2倍の桁数で、「 log10(x) = ln(x) / ln(10) 」によって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varfloat log10( varfloat arg ){
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( digitStock * 2.2 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// arg が10の何乗のオーダー（つまり桁数）か求める
	varint order = 0v;
	varfloat vf = 1.0vf; // argと同じオーダーの10の累乗数
	while( vf < arg ){
		order += 1v;
		vf *= 10.0vf;
	}
	
	// 収束を早めるために桁をオフセットして計算する
	arg = arg / vf;
	varfloat value = ln( arg ) / ln( 10.0vf );
	
	// log10 は入力が1桁ずれると値が1ずれる事を利用して、逆オフセットで補正
	value += order;
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * 平方根を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro sqrt( float arg ){
	return SYSTEM_PROCESS_FPU_sqrt( arg );
}

/**
 * 平方根を計算します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、ニュートン法によって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varfloat sqrt( varfloat arg ){
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// 0 の平方根は 0 なので、そのまま 0 を返す
	if(arg<0vf){
		digit( digitStock );
		return 0vf;
	}
	
	// 初期値設定
	varfloat value = 1.0vf;
	varfloat value_stock = 2.0vf;
	varfloat inv = 0.5vf;
	
	// 値が収束するまでニュートン法で飛ばし続ける
	while( value != value_stock ){
		value_stock = value;
		value += arg/value;
		value *= inv;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * N乗根を計算します。
 *
 * @param arg 計算対象の値。
 * @param rootPower N乗根のN。
 * @return (float) 計算結果の値。
 */
macro root( float arg, int rootPower ){
	return SYSTEM_PROCESS_FPU_root( arg, rootPower );
}

/**
 * N乗根を計算します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、ニュートン法によって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @param p N乗根のN。
 * @return 計算結果の値。
 */
varfloat root( varfloat arg, varint p ){
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// 負の入力には対応できない
	if(arg<0vf){
		digit( digitStock );
		error( ERROR_OUT_OF_DEFINITION );
		return 0vf;
	}
	
	// 初期値設定
	varfloat value = 1.0vf;
	varfloat value_stock = 2.0vf;
	varfloat inv = 0.5vf;
	varfloat m;
	varfloat c;
	
	// 収束するまでニュートン法で飛ばし続ける
	while( value != value_stock ){
		value_stock = value;
		c = ( value**p - arg );
		m = p*( value**(p-1v) );
		value -=	c / m;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}

/**
 * N乗根を計算します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、ニュートン法によって計算されます。
 * ただし 10 桁以下では、元の桁数 + 4桁 で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 * なお、この関数の第二引数は、常に整数であると見なされます。
 * この関数は、電卓ソフトなどで数値リテラルが浮動小数点数と見なされるモードにおける、
 * 利便性確保のためだけにサポートされています。
 * 通常の利用シーンでは使用する利点は特に無いため、root( varfloat, varint ) を使用してください。
 *
 * @param arg 計算対象の値。
 * @param vfp N乗根のN。
 * @return 計算結果の値。
 */
varfloat root( varfloat arg, varfloat vfp ){
	
	// 精度を出すために演算桁数を増加
	varint p = vfp;
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// 負の入力には対応できない
	if(arg<0vf){
		digit( digitStock );
		error( ERROR_OUT_OF_DEFINITION );
		return 0vf;
	}
	
	// 初期値設定
	varfloat value = 1.0vf;
	varfloat value_stock = 2.0vf;
	varfloat inv = 0.5vf;
	varfloat m;
	varfloat c;
	
	// 値が収束するまで展開項を加算
	while( value != value_stock ){
		value_stock = value;
		c = ( value**p - arg );
		m = p*( value**(p-1v) );
		value -=	c / m;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}










































/**
 * 絶対値を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro abs( float arg ){
	return SYSTEM_PROCESS_FPU_abs( arg );
}

/**
 * 絶対値を計算します。
 *
 * @param arg 計算対象の値。
 * @return (int) 計算結果の値。
 */
macro abs( int arg ){
	return SYSTEM_PROCESS_FPU_abs( arg );
}

/**
 * 絶対値を計算します。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varfloat abs( varfloat arg ){
	if( arg < 0vf ){
		return -arg;
	}
	return arg;
}

/**
 * 絶対値を計算します。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varint abs( varint arg ){
	if( arg < 0v ){
		return -arg;
	}
	return arg;
}








/**
 * 2つの引数の内、大きい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro max( float arg1, float arg2 ){
	return SYSTEM_PROCESS_FPU_max( arg1, arg2 );
}


/**
 * 2つの引数の内、大きい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return (int) 計算結果の値。
 */
macro max( int arg1, int arg2 ){
	return SYSTEM_PROCESS_FPU_max( arg1, arg2 );
}

/**
 * 2つの引数の内、大きい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return 計算結果の値。
 */
varfloat max( varfloat arg1, varfloat arg2 ){
	if( arg1 < arg2 ){
		return arg2;
	}
	return arg1;
}

/**
 * 2つの引数の内、大きい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return 計算結果の値。
 */
varint max( varint arg1, varint arg2 ){
	if( arg1 < arg2 ){
		return arg2;
	}
	return arg1;
}







/**
 * 2つの引数の内、小さい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro min( float arg1, float arg2 ){
	return SYSTEM_PROCESS_FPU_min( arg1, arg2 );
}

/**
 * 2つの引数の内、小さい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return (int) 計算結果の値。
 */
macro min( int arg1, int arg2 ){
	return SYSTEM_PROCESS_FPU_min( arg1, arg2 );
}

/**
 * 2つの引数の内、小さい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return 計算結果の値。
 */
varfloat min( varfloat arg1, varfloat arg2 ){
	if( arg1 < arg2 ){
		return arg1;
	}
	return arg2;
}

/**
 * 2つの引数の内、小さい方を返します。
 *
 * @param arg1 計算対象の値。
 * @param arg2 計算対象の値。
 * @return 計算結果の値。
 */
varint min( varint arg1, varint arg2 ){
	if( arg1 < arg2 ){
		return arg1;
	}
	return arg2;
}








/**
 * 階乗を計算します。この関数は引数・戻り値共に float ですが、内部で近い int に丸めて計算されます。変換に伴い、誤差が精度に影響する可能性があります。厳密性を要求する場合は int 引数のものを使用してください。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
float fac( float arg ){
	int intArgFloor = arg;
	int intArgCeil = arg+1;
	int intArg = intArgFloor;
	if( SYSTEM_PROCESS_FPU_abs(intArgCeil-arg) < SYSTEM_PROCESS_FPU_abs(intArgFloor-arg) ){
		intArg = intArgCeil;
	}
	return SYSTEM_PROCESS_FPU_fac( intArg );
}

/**
 * 階乗を計算します。
 *
 * @param arg 計算対象の値。
 * @return (int) 計算結果の値。
 */
macro fac( int arg ){
	return SYSTEM_PROCESS_FPU_fac( arg );
}

/**
 * 階乗を計算します。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varint fac( varint arg ){

	varint value = arg;

	if( arg <= 0vf ){
		value = 1v;
		return 1v;
	}

	for( varint i=arg-1v; 1v<i; i-- ){
		value = value * i;
	}
	return value;

}

/**
 * 階乗を計算します。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varfloat fac( varfloat arg ){

	varint intArgFloor = arg;
	varint intArgCeil = arg+1v;
	varint intArg = intArgFloor;

	if( abs(intArgCeil-arg) < abs(intArgFloor-arg) ){
		intArg = intArgCeil;
	}

	varfloat value = fac( intArg );
	return value;

}





/**
 * サイン（正弦）関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro sin( float arg ){
	return SYSTEM_PROCESS_FPU_sin( arg );
}

/**
 * サイン（正弦）関数を計算します。
 * <br />
 * 内部では、「 元の桁数の1.34倍 + 引数のオーダーの10倍 」の桁数で、マクローリン展開によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 + 引数のオーダーの10倍 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 * <br />
 * 0 ~ π/2 の範囲以外の引数に対しては、三角関数の対称性と周期性を利用し、内部では 0 ~ π の範囲の値を使用して計算されます。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 */
varfloat sin( varfloat arg ){
	
	// 現時点の演算桁数を控えておく
	int digitStock = getdigit();
	
	
	// この関数内では、対称性を利用し、
	// 0 からPI/2までの範囲にシフトして計算する
	// （そのほうが収束が速くなるため）
	
	
	varfloat pi = pi();
	varfloat shiftN = 0.0vf;
	varfloat shiftN_stock = 1.0vf;
	int argOrder;
	
	// 必要なシフト数を求める
	// ループしているのは、著しく大きな桁数に対する精度落ち対策
	while( shiftN != shiftN_stock ){
		
		shiftN_stock = shiftN;
		
		// 必要な精度で円周率を計算する
		pi = pi();
		
		// 何周期分シフトするか計算
		shiftN = abs( arg / pi );
		
		// 必要なシフト回数が 10 の何乗オーダーであるかの値を求める
		argOrder = max( (int)(order( shiftN )), (int)0vf );
		
		// シフト回数だけ余裕をもって演算桁数を確保しないと、
		// 後の剰余演算によるシフトで桁落ちの危険がある
		digit( digitStock * 1.34 + 10*argOrder );
		if( digitStock <= 10 ){
			digit( digitStock + 4 + 10*argOrder );
		}
	}
	
	// 引数がマイナスなら、プラスにして計算し、後で補正（全体を左右ひっくり返す）
	boolean globalMinus = false;
	if( arg < 0vf ){
		globalMinus = true;
		arg = -arg;
	}
	
	// 2π 周期性を利用してシフトし、0 から 2π の範囲にもってくる
	if( 2vf*pi <= arg ){
		arg = arg % ( 2vf*pi ); // この剰余演算の桁落ちを防ぐために、十分な桁数が必要
	}
	
	
	// PI より大きな x については値がマイナスになるので、πシフトしてプラスにして計算
	boolean minus = false;
	if( pi <= arg ){
		minus = true;
		arg -= pi;
	}
	
	// さらに対称性を利用して、π/2 から π までの範囲を 0 から π/2 以内にもってくる
	if( pi/2vf < arg && arg < pi ){
			arg = pi-arg;
	}
	
	// 初期値設定
	varfloat value = arg;
	varfloat value_stock = -500.0vf;
	varfloat term;
	varint i = 1v;
	varint factorial = 1v;
	varfloat powor = arg;
	varint sgn = 1v;
	
	// 値が収束するまでマクローリン展開の各項を加算
	while( value != value_stock ){
		value_stock = value;
		powor = powor * arg * arg;
		factorial = factorial * 2vf*i * ( 2vf*i + 1vf );
		sgn = sgn * -1vf;
		term = ( sgn * powor ) / factorial;
		value += term;
		i++;
	}
	
	// 行った符号反転を補正して元に戻す
	if( globalMinus ){
		value = -value;
	}
	if( minus ){
		value = -value;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * コサイン（余弦）関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro cos( float arg ){
	return SYSTEM_PROCESS_FPU_cos( arg );
}

/**
 * コサイン（余弦）関数を計算します。
 * <br />
 * 内部では、「 元の桁数の1.34倍 + 引数のオーダーの10倍 」の桁数で、マクローリン展開によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 + 引数のオーダーの10倍 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 * <br />
 * 0 ~ π/2 の範囲以外の引数に対しては、三角関数の対称性と周期性を利用し、内部では 0 ~ π の範囲の値を使用して計算されます。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat cos( varfloat arg ){
	
	// 現時点の演算桁数を控えておく
	int digitStock = getdigit();
	
	// この関数内では、対称性を利用し、
	// 0 からPI/2までの範囲にシフトして計算する
	// （そのほうが収束が速くなるため）
	
	varfloat pi = pi();
	varfloat shiftN = 0.0vf;
	varfloat shiftN_stock = 1.0vf;
	int argOrder;
	
	// 必要なシフト数を求める
	// ループしているのは、著しく大きな桁数に対する精度落ち対策
	while( shiftN != shiftN_stock ){
		
		shiftN_stock = shiftN;
		
		// 必要な精度で円周率を計算する
		pi = pi();
		
		// 何周期分シフトするか計算
		shiftN = abs( arg / pi );
		
		// 必要なシフト回数が 10 の何乗オーダーであるかの値を求める
		argOrder = max( (int)(order( shiftN )), (int)0vf );
		
		// シフト回数だけ余裕をもって演算桁数を確保しないと、
		// 後の剰余演算によるシフトで桁落ちの危険がある
		digit( digitStock * 1.34 + 10*argOrder );
		if( digitStock <= 10 ){
			digit( digitStock + 4 + 10*argOrder );
		}
	}
	
	// 引数がマイナスならプラスになおす（ cos は遇関数なので結果は変わらない ）
	if( arg < 0vf ){
		arg = -arg;
	}
	
	// 2π 周期性を利用してシフトし、0 から 2π の範囲にもってくる
	if( 2vf*pi <= arg ){
		arg = arg % ( 2vf*pi ); // この剰余演算の桁落ちを防ぐために、十分な桁数が必要
	}
	
	// PI より大きな x については値がマイナスになるので、πシフトしてプラスにして計算
	boolean minus = false;
	if( pi <= arg ){
		minus = true;
		arg -= pi;
	}
	
	// さらに対称性を利用して、π/2 から π までの範囲を 0 から π/2 以内にもってくる
	if( pi/2vf < arg && arg < pi ){
			arg = pi-arg;
			minus = !minus;
	}
	
	// 初期値設定
	varfloat value = 1.0vf;
	varfloat value_stock = -500.0vf;
	varfloat term;
	varint i = 1v;
	varint factorial = 1v;
	varfloat powor = 1.0vf;
	varint sgn = 1v;
	
	// 値が収束するまでマクローリン展開の各項を加算
	while( value != value_stock ){
		value_stock = value;
		powor = powor * arg * arg;
		factorial = factorial * ( 2vf*i - 1vf ) * 2vf*i;
		sgn = sgn * -1vf;
		term = ( sgn * powor ) / factorial;
		value += term;
		i++;
	}
	
	// 行った符号反転を補正して元に戻す
	if( minus ){
		value = -value;
	}
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * タンジェント（正接）関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro tan( float arg ){
	return SYSTEM_PROCESS_FPU_tan( arg );
}

/**
 * タンジェント（正接）関数を計算します。
 * <br />
 * 内部では、元の桁数の2.1倍の桁数で、「 tan(x) = sin(x) / cos(x) 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat tan( varfloat arg ){
	
	// 精度を出すために演算桁数を増加
	int digitStock = getdigit();
	digit( digitStock * 2.1 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	
	// 素直に tan = sin / cos で計算
	varfloat pi = pi();
	varfloat s = sin( arg );
	varfloat c = cos( arg );
	varfloat value = s / c;
	
	// 演算桁数を元に戻し、結果を返す
	digit( digitStock );
	value += 0vf;
	return value;
}





















/**
 * アークサイン関数（サインの逆関数）を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro asin( float arg ){
	return SYSTEM_PROCESS_FPU_asin( arg );
}

/**
 * アークサイン関数（サインの逆関数）を計算します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、「 絶対値が0.7以下の引数についてはマクローリン展開、それより外側はニュートン法 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat asin( varfloat arg ){
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	if( arg < -1vf || 1vf < arg ){
		digit( digitStock );
		return 0vf;
	}
	if( arg==1vf || arg==-1vf ){
		digit( digitStock );
		varfloat pi2 = pi() / 2.0vf;
		return pi2;
	}
	varfloat value = 0.0vf;
	varfloat value_stock = -500.0vf;
	varfloat term;
	varint i = 1v;
	varint oddFactorial = 1v;
	varint evenFactorial = 1v;
	varfloat powor = 1.0vf;
	varint m;
	if( -0.7vf <= arg && arg <= 0.7vf ){
		value = arg;
		while( value != value_stock ){
			value_stock = value;
			oddFactorial = oddFactorial * ( 2vf*i - 1vf );
			evenFactorial = evenFactorial * ( 2vf*i );
			powor = powor * arg * arg;
			term = ( oddFactorial * powor ) / ( evenFactorial * ( 2vf*i+1vf ) );
			value += term;
			i++;
		}
	}
	if( arg < 0.7vf || 0.7vf < arg ){
		value = 0.0vf;
		value_stock = 0.1vf;
		while( value != value_stock ){
			value_stock = value;
			value = value - ( sin(value) - arg ) / cos( value );
		}
	}
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * アークコサイン関数（コサインの逆関数）を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro acos( float arg ){
	return SYSTEM_PROCESS_FPU_acos( arg );
}

/**
 * アークコサイン関数（コサインの逆関数）を計算します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、「 acos(x) = π/2 - asin(x) 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat acos( varfloat arg ){
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	varfloat value = 0.5vf*pi() - asin( arg );
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * アークタンジェント関数（タンジェントの逆関数）を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro atan( float arg ){
	return SYSTEM_PROCESS_FPU_atan( arg );
}

/**
 * アークタンジェント関数（タンジェントの逆関数）を計算します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、「 絶対値が0.7以下の引数についてはマクローリン展開、それより外側はニュートン法 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat atan( varfloat arg ){
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	varfloat value = 0.0vf;
	varfloat value_stock = -500.0vf;
	varfloat value_inv = 0.0vf;
	varfloat term;
	varint buff;
	varint sgn = 1v;
	varfloat powor = arg;
	varint i = 1v;
	varint fac;
	varfloat pi = pi();
	if( -0.7vf <= arg && arg <= 0.7vf ){
		value = arg;
		while( value != value_stock ){
			value_stock = value;
			powor = powor * arg * arg;
			sgn = sgn * -1v;
			term = ( sgn * powor ) / ( 2vf*i+1vf );
			value += term;
			i++;
		}
	}
	if( arg < -0.7vf || 0.7vf < arg ){
		while( value != value_stock ){
			value_stock = value;
			value = value - ( tan(value) - arg )*( cos(value) )*( cos(value) );
			value = value % pi;
		}
	}
	digit( digitStock );
	value += 0vf;
	return value;
}













/**
 * ハイパボリックサイン関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro sinh( float arg ){
	return SYSTEM_PROCESS_FPU_sinh( arg );
}

/**
 * ハイパボリックサイン関数を計算します。
 * <br />
 * 内部では、元の桁数の2.1倍の桁数で、「 sinh(x) = ( exp(x) - exp(-x) ) / 2 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat sinh( varfloat arg ){
	int digitStock = getdigit();
	digit( digitStock * 2.1 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	varfloat value = ( exp(arg) - exp(-arg) )*(varfloat)0.5vf;
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * ハイパボリックコサイン関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro cosh( float arg ){
	return SYSTEM_PROCESS_FPU_cosh( arg );
}

/**
 * ハイパボリックコサイン関数を計算します。
 * <br />
 * 内部では、元の桁数の2.1倍の桁数で、「 sinh(x) = ( exp(x) + exp(-x) ) / 2 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat cosh( varfloat arg ){
	int digitStock = getdigit();
	digit( digitStock * 2.1 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	varfloat value = ( exp(arg) + exp(-arg) )*(varfloat)0.5vf;
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * ハイパボリックコタンジェント関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro tanh( float arg ){
	return SYSTEM_PROCESS_FPU_tanh( arg );
}

/**
 * ハイパボリックコタンジェント関数を計算します。
 * <br />
 * 内部では、元の桁数の2.8倍の桁数で、「 sinh(x) = ( exp(x) - exp(-x) ) / ( exp(x) + exp(-x) ) 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat tanh( varfloat arg ){
	int digitStock = getdigit();
	digit( digitStock * 2.8 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	varfloat plus = exp(arg);
	varfloat minus = exp(-arg);
	varfloat value = ( plus - minus ) / ( plus + minus );
	digit( digitStock );
	value += 0vf;
	return value;
}









/**
 * ハイパボリックサインの逆関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro asinh( float arg ){
	return SYSTEM_PROCESS_FPU_asinh( arg );
}


/**
 * ハイパボリックサインの逆関数を計算します。
 * <br />
 * 内部では、元の桁数の2.1倍の桁数で、「 asinh(x) = ln( x + √( x*x + 1 ) ) 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat asinh( varfloat arg ){
	int digitStock = getdigit();
	digit( digitStock * 2.1 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	varfloat value = ln( arg + sqrt( arg*arg + 1.0vf ) );
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * ハイパボリックコサインの逆関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro acosh( float arg ){
	return SYSTEM_PROCESS_FPU_acosh( arg );
}


/**
 * ハイパボリックコサインの逆関数を計算します。
 * <br />
 * 内部では、元の桁数の2.1倍の桁数で、「 acosh(x) = ln( x + √( x*x - 1 ) ) 」によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
 varfloat acosh( varfloat arg ){
	if( arg <= 1vf ){
		return 0vf;
	}
	int digitStock = getdigit();
	digit( digitStock * 2.1 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	varfloat value = ln( arg + sqrt( arg*arg - 1.0vf ) );
	digit( digitStock );
	value += 0vf;
	return value;
}





/**
 * ハイパボリックタンジェントの逆関数を計算します。
 *
 * @param arg 計算対象の値。
 * @return (float) 計算結果の値。
 */
macro atanh( float arg ){
	return SYSTEM_PROCESS_FPU_atanh( arg );
}


/**
 * ハイパボリックタンジェントの逆関数を計算します。
 * <br />
 * 内部では、元の桁数の2.1倍の桁数で、「 絶対値が0.9以下の引数については atanh(x) = 1/2 * log(1+x)/log(1-x) 」によって、それより外側はニュートン法によって計算されます。
 * ただし 10 桁以下では、「 元の桁数 + 4桁 」の桁数で計算されます。この余剰桁数は、将来的に（ 恐らくより高精度な方向に ）変更される可能性があります。
 * 関数の対称性を利用し、負の引数については、正の引数における値を利用して計算されます。
 * <br />
 * <span style="font-weight:bold;">古いバージョンでは、-0.7 以下（負の無限大側）の引数について値を求められません。計算が終わらないか、0 が返されます。この問題は VCSSL 3.3.2 において修正されました。</span>
 *
 * @param arg 計算対象の値。
 * @return 計算結果の値。
 * 
 */
varfloat atanh( varfloat arg ){
	if( arg <= -1vf ){
		return 0vf;
	}
	if( 1vf <= arg ){
		return 0vf;
	}
	int digitStock = getdigit();
	digit( digitStock * 2.1 );
	if( digitStock <= 10 ){
		digit( digitStock + 4 );
	}
	bool minus = false;
	if( arg < 0vf ){
		minus = true;
		arg = -arg;
	}

	varfloat value = 0.0vf;
	varfloat value_stock = 500.0vf;
	if( arg <= 0.9vf ){
		value = ( ln( 1.0vf + arg ) - ln( 1.0vf - arg ) ) * 0.5vf;
	}
	if( 0.9vf < arg ){
		while( value != value_stock ){
			value_stock = value;
			value = value - ( tanh(value) - arg )*( 1.0vf - arg*arg );
		}
	}

	if(minus){
		value = -value;
	}

	digit( digitStock );
	value += 0vf;
	return value;
}



















/**
 * 角度の単位変換です。度数法の角度を、弧度法（ラジアン）の角度に変換します。
 *
 * @param angle 度数法の角度。
 * @return (float) 弧度法（ラジアン）の角度。
 */
macro deg( float angle ){
	return SYSTEM_PROCESS_FPU_deg( angle );
}

/**
 * 角度の単位変換です。度数法の角度を、弧度法（ラジアン）の角度に変換します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、「 度数 = ラジアン数 * 180 / π 」によって計算されます。
 *
 * @param angle 度数法の角度。
 * @return 弧度法（ラジアン）の角度。
 * 
 */
varfloat deg(varfloat rad){
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	varfloat value = rad * 180.0vf / pi();
	digit( digitStock );
	return value;
}


/**
 * 角度の単位変換です。弧度法（ラジアン）の角度を、度数法の角度に変換します。
 *
 * @param angle 弧度法（ラジアン）の角度。
 * @return (float) 度数法の角度。
 */
macro rad( float angle ){
	return SYSTEM_PROCESS_FPU_rad( angle );
}

/**
 * 角度の単位変換です。弧度法（ラジアン）の角度を、度数法の角度に変換します。
 * <br />
 * 内部では、元の桁数の1.34倍の桁数で、「 ラジアン数 = 度数 * π / 180 」によって計算されます。
 *
 * @param angle 弧度法（ラジアン）の角度。
 * @return 度数法の角度。
 * 
 */
varfloat rad(varfloat deg){
	int digitStock = getdigit();
	digit( digitStock * 1.34 );
	varfloat value = deg * pi() / 180.0vf;
	digit( digitStock );
	return value;
}































// 内部処理用
macro order( varfloat arg ){
	return SYSTEM_PROCESS_FPU_orderVF( arg );
}









