/**
 * <p>
 * VCSSL Thread ライブラリ は、マルチスレッドを扱うための標準ライブラリです。
 * </p>
 * 
 * <div style="border: solid 1px #000000;margin:20px 0px 0px 0px; padding:10px;">
 * <div style="font-weight:bold;">- 注意 -</div>
 * <div style="padding:10px;">
 * 現行版の RINEARN VCSSL Runtime では、VCSSL Thread APIをサポートしていますが、マルチスレッド処理への対応が十分ではありません。 これは、現在のVCSSLエンジンの基本設計が、シングルスレッドのみを想定して開発された初期のVCSSLエンジンの基本設計を、部分的に踏襲している事に由来します。 これにより、処理内容によっては、論理的な不整合を含む、いくつかの不都合が生じる可能性があります。 RINEARN VCSSL Runtime で VCSSL Thread API の使用を検討する場合は、この事情を踏まえた上で判断してください。現時点で想定可能なものとしては、以下のような不都合が生じる可能性があります。 
 * </div>
 * 
 * <div style="font-weight:bold;">・同一の配列変数へ、複数スレッドから同時アクセスした場合における、インデックスの不整合</div>
 * 
 * <div style="padding:10px;">
 * 現在のVCSSLエンジンにおける、配列変数の値を参照するモジュールには、シングルスレッドのみを想定した設計が残っています。これにより、同一の配列変数に、同時にアクセスした場合、正しくないインデックスの値が参照される可能性があります。 
 * </div>
 * 
 * <div style="font-weight:bold;">・パフォーマンスのボトルネック</div>
 * 
 * <div style="padding:10px;">
 * 現在のVCSSLエンジンには、マルチスレッド処理ではボトルネックとなる箇所を複数含んでいます。このため、並列性の高い処理を複数スレッドで分担しても、パフォーマンスの大幅な向上は見込めません。 つまり、RINEARN VCSSL Runtime における Thread API は、あくまで複数の処理の流れを作る目的には有効ですが、演算パフォーマンスを引き出すような目的にはあまり意味がありません。 
 * </div>
 * 
 * <div style="font-weight:bold;">・同一の関数への、非常に頻繁な複数スレッド同時アクセスに伴う、エンジンの緊急停止</div>
 * 
 * <div style="padding:10px;">
 * 原則として、同一の関数を複数スレッドで実行する事は可能です。その場合、引数やローカル変数は、スレッド間で混同されないように、スレッドの数だけ確保されます。 しかし、同時アクセスのタイミングがあまりに短い間隔に集中すると、この処理が追いつかなくなり、不整合を防ぐためにエンジンが緊急停止する場合があります。 ※ 関数の実行中の時間が重なる事は問題ではありません。関数をコールする瞬間（引数を渡す瞬間）が重なる事が問題となります。
 * </div>
 * 以上のような不都合が生じる可能性があるため、現状の RINEARN VCSSL Runtime では、VCSSL Thread APIを厳密性の要求される処理（科学技術計算や数値計算など）に使用する事は推奨されません。
 * </div>
 * 
 * @author  松井文宏 - Fumihiro Matsui ( RINEARN )
 * @license Public domain ( CC0 )
 */



/*
# ====================================================================================================
# 
# PRAGMA COMPILE    DYNAMIC_REFERRED
# PRAGMA COMPILE    STATIC_REFERRED
# PRAGMA RESERVE    NOT_REFERRED
# 
# PRAGMA INTERNAL   RINEARN  {
#     
#     MAINSTREAM    { "R4***",    "OR_LATER" }
#     COMPATIBLE    { "R3***",    "R2***"    }
#     
#     SYSTEMCALL    { "SYSTEM_PROCESS_DRIVER_THREAD_*" }
#     INTERFACE     { "GPCI",     "DPCI" }
#     
#     CONNECT       { "ONLOAD",   "STATIC",   "rxvesapi.process.driver.ThreadProcessDriver"   }
#     ARCHIVE       { "ONBUILD",  "STATIC",   "rxvesapi.process.library.ThreadProcessLibrary" }
#     
# }
# 
# PRAGMA INTERNAL   END
# PRAGMA END
# 
# ====================================================================================================
*/



/**
 * スレッドを生成し、それに固有の識別番号である「スレッドID」を割り振って返します。
 *
 * @return 生成したスレッドに割り振られたスレッドID（識別番号）
 */
int newThread(){
  return SYSTEM_PROCESS_DRIVER_THREAD_createThread();
}


/**
 * スレッドを破棄します。
 *
 * @param threadID 対象スレッドのID
 */
void deleteThread( int threadID ){
  SYSTEM_PROCESS_DRIVER_THREAD_disposeThread( threadID );
}


int getThreadLimit(){
	return SYSTEM_PROCESS_DRIVER_THREAD_getThreadCapacity();
}


/**
 * スレッドの実行を開始します。
 *
 * @param threadID 対象スレッドのID
 */
void startThread( int threadID ){
  SYSTEM_PROCESS_DRIVER_THREAD_startThread( threadID );
}



/**
 * スレッドの実行が終了するまで、呼び出し元の処理を待機します。
 * 
 * @param threadID 対象スレッドのID
 */
void awaitThread( int threadID ){
  SYSTEM_PROCESS_DRIVER_THREAD_awaitThread( threadID, -1 );
}


/*
 * 試験実装、正式サポートではありません。
 */
void awaitThread( int threadID, int timeOut ){
  SYSTEM_PROCESS_DRIVER_THREAD_awaitThread( threadID, timeOut );
}








/**
 * スレッドの実行を一時停止します。
 *
 * @param threadID 対象スレッドのID
 * @param time 待機する時間のミリ秒数
 */
void sleepThread( int threadID, int time ){
  SYSTEM_PROCESS_DRIVER_THREAD_sleepThread( threadID, time );
}


/**
 * スレッドの実行を一時停止します。
 *
 * @param threadID 対象スレッドのID
 * @param milliSeconds 待機する時間のミリ秒数
 * @param nanoSeconds 待機する時間のナノ秒数
 */
void sleepThread( int threadID, int milliSeconds, nanoSeconds ){
  SYSTEM_PROCESS_DRIVER_THREAD_sleepThread( threadID, milliSeconds, nanoSeconds );
}



/**
 * スレッドの実行が終了するまで、呼び出し元の処理を待機します。
 * 現在は、より新しい <a href="#awaitThread">awaitThread</a> が利用可能です。
 * この関数は互換目的でサポートされています。
 * 
 * @param threadID 対象スレッドのID
 */
void waitForThread( int threadID ){
  SYSTEM_PROCESS_DRIVER_THREAD_awaitThread( threadID );
}
void waitForThread( int threadID, int timeOut ){
  SYSTEM_PROCESS_DRIVER_THREAD_awaitThread( threadID, timeOut );
}



