encode UTF-8;

import open.graphics2d.Graphics2DFramework;
import GUI;
import Math;
import Graphics;
import Graphics2D;

/**
 * open.graphics2d.Graphics2DFramework モジュールのテストです。
 */


/** テストで用いるスプライトのIDです。 */
int sprite = NULL;

/** テストで用いるスプライトのX座標です。 */
int spriteX = 0;

/** テストで用いるスプライトのY座標です。 */
int spriteY = 0;

/** テストで用いるスプライトの幅です。 */
int spriteWidth = 50;

/** テストで用いるスプライトの高さです。 */
int spriteHeight = 50;

/**
 * この関数はフレームワーク側から、
 * 起動後のタイミングで一度だけ実行されます。
 */
void initialize(int renderer){
	testSetBackgroundColor();
	testGetBackgroundColor();
	testSetWindowSize();
	testGetWindowSize();
	testSetWindowTitle();
	testGetWindowTitle();
	testSetFrameRate();
	testSetMarginTop();
	testGetMarginTop();
	testSetMarginBottom();
	testGetMarginBottom();
	testSetMarginRight();
	testGetMarginRight();
	testSetMarginLeft();
	testGetMarginLeft();
	testGetWindow();

	// スプライトを生成して配置
	sprite = newOvalSprite(spriteX, spriteY, spriteWidth, spriteHeight, true);
	setSpriteColor(sprite, 255, 255, 0, 255);
	mountSprite(sprite, renderer);
}


/**
 * この関数はフレームワーク側から、
 * 画面更新タイミングの間で毎回実行されます。
 *
 * @author 松井文宏
 */
void update(int renderer){

	// スプライトを移動
	spriteX++;
	spriteY++;
	if(500 < spriteX){
		spriteX = 0;
	}
	if(500 < spriteY){
		spriteY = 0;
	}
	setSpriteLocation(sprite, spriteX, spriteY);

	// スプライトをサイズ変更
	spriteWidth++;
	spriteHeight++;
	if(100 < spriteWidth){
		spriteWidth = 50;
	}
	if(100 < spriteHeight){
		spriteHeight = 50;
	}
	setSpriteSize(sprite, spriteWidth, spriteHeight);
}


/**
 * この関数はフレームワーク側から、
 * 画面更新タイミングで毎回実行されます。
 */
void paint(int renderer){
	setDrawColor(renderer, 70, 140, 255, 180);
	drawOval(renderer, 0, 0, 600, 400, true);
	setDrawColor(renderer, 70, 255, 70, 180);
	drawRect(renderer, 300, 300, 500, 300, true);

	testGetCurrentFrameRate();
	testGetLastFrameTime();
}


/**
 * この関数はフレームワーク側から、
 * 終了前のタイミングで一度だけ実行されます。
 */
void finalize(int renderer){
	alert("終了します");
}


/**
 * ボタンのイベントハンドラです。
 * ボタンがクリックされたタイミングで実行されます。
 */
public void onButtonClick(int id){
	testExport();
}


/** 画像ファイルの出力テストです。 */
public void testExport(){
	string fileName = "Graphics2DFrameworkTest.jpg";
	export(fileName, "JPEG", 100.0);
	alert(fileName + " に出力しました。");
}


/** 背景色の設定テストです。 */
void testSetBackgroundColor(){
	setBackgroundColor(0, 0, 0, 255);
}

/** 背景色の取得テストです。 */
void testGetBackgroundColor(){
	int color[] = getBackgroundColor();
	assert(color[0] == 0);
	assert(color[1] == 0);
	assert(color[2] == 0);
	assert(color[3] == 255);
}




/** ウィンドウサイズの変更テストです。 */
void testSetWindowSize(){
	setWindowSize(1000, 800);
}


/** ウィンドウサイズの取得テストです。 */
void testGetWindowSize(){
	int size[] = getWindowSize();
	assert(size[0] == 1000);
	assert(size[1] == 800);
}


/** タイトルサイズの変更テストです。 */
void testSetWindowTitle(){
	setWindowTitle("Test");
}


/** タイトルサイズの取得テストです。 */
void testGetWindowTitle(){
	assert(getWindowTitle() == "Test");
}


/** 理想フレームレートの設定テストです。 */
void testSetFrameRate(){
	setFrameRate(24.0);
}


/** 理想フレームレートの取得テストです。 */
void testGetFrameRate(){
	assert(getFrameRate() == 24.0);
}


/** 実測フレームレートの取得テストです。 */
void testGetCurrentFrameRate(){
	float rate = getCurrentFrameRate();
	int rend = getRenderer();
	setDrawFontSize(rend, 12);
	setDrawColor(rend, 255, 255, 255, 255);
	drawText(rend, 50, 50, 1000, 20, "Current Frame Rate = " + rate);
}


/** 最終フレーム時刻の取得テストです。 */
void testGetLastFrameTime(){
	int time = getLastFrameTime();
	int rend = getRenderer();
	setDrawFontSize(rend, 12);
	setDrawColor(rend, 255, 255, 255, 255);
	drawText(rend, 50, 80, 1000, 20, "Last Frame Time = " + time);
}


/** ウィンドウ内余白（上）の設定テストです。 */
void testSetMarginTop(){
	setMarginTop(20);
}

/** ウィンドウ内余白（上）の取得テストです。 */
void testGetMarginTop(){
	assert(getMarginTop() == 20);
}


/** ウィンドウ内余白（下）の設定テストです。 */
void testSetMarginBottom(){
	setMarginBottom(20);
}

/** ウィンドウ内余白（下）の取得テストです。 */
void testGetMarginBottom(){
	assert(getMarginBottom() == 20);
}

/** ウィンドウ内余白（右）の設定テストです。 */
void testSetMarginRight(){
	setMarginRight(20);
}

/** ウィンドウ内余白（右）の取得テストです。 */
void testGetMarginRight(){
	assert(getMarginRight() == 20);
}

/** ウィンドウ内余白（左）の設定テストです。 */
void testSetMarginLeft(){
	setMarginLeft(200);
}

/** ウィンドウ内余白（左）の取得テストです。 */
void testGetMarginLeft(){
	assert(getMarginLeft() == 200);
}

/** ウィンドウIDの設定テストです。 */
void testGetWindow(){
	int window = getWindow();
	int button = newButton(10, 20, 180, 50, "EXPORT");
	mountComponent(button, window);
}




