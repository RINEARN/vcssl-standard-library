encode UTF-8;

import open.data.DataWrapper;


/**
 * <p>
 * このモジュール open.data.WrappedStack は、
 * スタック型のデータ構造を提供します。	
 * </p>
 *
 * <p>
 * このモジュールでは、スタックのデータを保持する
 * ジェネリック構造体 <a href="#WrappedStack">WrappedStack</a> と、
 * それに対してデータを出し入れするジェネリック関数 
 * <a href="#push">push</a>, <a href="#pop">pop</a> 
 * などが提供されます。 
 * </p>
 *
 * <p>
 * なお、この open.data.WrappedStack では、
 * 要素を <a href="DataWrapper.html">DataWrapper</a> 構造体で
 * ラッピングして保持する実装になっています。
 * <br />
 * そのため WrappedStackでは、 
 * open.data.<a href="Stack.html">Stack</a> とは異なり、
 * 配列を要素として扱う事ができます。
 * </p>
 *
 * <p>
 * 反面、要素の出し入れの際に DataWrapper 構造体への
 * ラッピング処理を伴うため、そのオーバーヘッドの分だけ、
 * Stack よりも処理が重くなります。
 * <br />
 * 従って、要素が配列でない場合には、
 * WrappedStack よりも Stack の使用が推奨されます。
 * </p>
 */


/**
 * スタック構造体です。スタックのデータを保持します。
 *
 * @author 松井文宏
 */
public struct WrappedStack<Type>{
	int size = 0;
	DataWrapper<Type> data[1];
}


/**
 * 要素を全て削除します。
 *
 * @param stack 対象のスタック構造体
 * @author 松井文宏
 */
public void clear<Type>( WrappedStack<Type> &stack ){
	alloc[0] stack.data;
	alloc[1] stack.data;
	stack.size = 0;
}


/**
 * 使用中のサイズを返します。
 *
 * @param stack 対象のスタック構造体
 * @author 松井文宏
 */
public int size<Type>( WrappedStack<Type> &stack ){
	return stack.size;
}


/**
 * スタックに要素を追加します。
 *
 * @param stack 対象のスタック構造体
 * @param value 追加する要素
 * @author 松井文宏
 */
public void push<Type>( WrappedStack<Type> &stack, Type value ){
	setProperLength<Type>(stack);
	stack.data[ stack.size++ ] = wrap<Type>(value);
}


/**
 * スタックから要素を取り出します。
 * 取り出した要素は、スタックから削除されます。
 *
 * @param stack 対象のスタック構造体
 * @return 取り出した要素
 * @author 松井文宏
 */
public Type pop<Type>( WrappedStack<Type> &stack ){
	setProperLength<Type>(stack);
	checksize( --stack.size );
	return unwrap<Type>(stack.data[ stack.size ]);
}


/**
 * スタックから要素を削除せずに取り出します。
 *
 * @param stack 対象のスタック構造体
 * @return 取り出した要素
 * @author 松井文宏
 */
public Type peek<Type>( WrappedStack<Type> &stack ){
	checksize( stack.size-1 );
	return unwrap<Type>(stack.data[ stack.size-1 ]);
}


/**
 * スタックが指定された要素を含んでいるか判定します。
 *
 * @param stack 対象のスタック構造体
 * @param element 含まれるか判定したい要素
 * @author 松井文宏
 */
public bool contains<Type>( WrappedStack<Type> &stack, Type element ){
	int n = stack.size;
	DataWrapper<Type> wrappedElement = wrap<Type>(element);
	for(int i=0; i<n; i++){
		if(stack.data[i] == wrappedElement){
			return true;
		}
	}
	return false;
}


/**
 * スタックが保持する全要素の順序を反転させます。
 *
 * @param stack 対象のスタック構造体
 * @author 松井文宏
 */
public void reverse<Type>( WrappedStack<Type> &stack ){
	int n = stack.size;
	DataWrapper<Type> rev[n];
	for(int i=0; i<n; i++){
		rev[i] = stack.data[n-1-i];
	}
	stack.data = rev;
}


/**
 * スタックが保持する全要素を、DataWrapper配列に格納して返します。
 * なお、順序は pop や peek で
 * 最初に得られる要素を格納するものが [ 0 ] になります。
 *
 * @param stack 対象のスタック構造体
 * @return スタックの全要素をまとめたDataWrapper配列
 * @author 松井文宏
 */
public DataWrapper<Type>[] toDataWrapperArray<Type>( WrappedStack<Type> &stack ){
	DataWrapper<Type> array[] = stack.data;
	int n = stack.size;
	alloc[n] array;
	DataWrapper<Type> rev[n];
	for(int i=0; i<n; i++){
		rev[i] = array[n-1-i];
	}
	return rev;
}


/**
 * 使用中のサイズに適切な配列バッファ長を設定します。
 *
 * @param stack 対象のスタック構造体
 * @author 松井文宏
 */
private void setProperLength<Type>( WrappedStack<Type> &stack ){
	int zero = 0;
	int length = length( stack.data, zero );
	int properLength = getProperLength(length, stack.size);
	if(properLength != length){
		alloc[ properLength ] stack.data;
	}
}


/**
 * スタックポインタの値が適正かどうかを確認し、不正ならエラーを出力します。
 *
 * @param size スタックポインタの値
 * @author 松井文宏
 */
private int checksize(int size){
	if(size < 0){
		error("スタックポインタが負の値にアクセスしました。");
	}
}


/**
 * 現在のスタックバッファ長と、スタックポインタの値から、
 * 最適なスタックバッファ長を返します。
 *
 * @param length 現在のスタックバッファ長
 * @param size 現在のスタックポインタの値
 * @author 松井文宏
 */
private int getProperLength(int length, int size){
	if( length == 0 ){
		return 1;
	}else if( length <= size ){
		return length * 2;
	}else if( size < length/2 ){
		return length / 2;
	}else{
		return length;
	}
}

