encode UTF-8;

import open.file.TextFile;


/**
 * <p>open.file.TextFile モジュールのテストです。</p>
 */


const string textEncoding = "Shift_JIS";

const string TEST_DIR_PATH = "./TestFiles";
const string CRLF_FILE_PATH = "./TestFiles/CRLF.txt";
const string LF_FILE_PATH = "./TestFiles/LF.txt";
const string CR_FILE_PATH = "./TestFiles/CR.txt";

const string GENERAL_FILE_PATH = "./TestFiles/Test.txt";

const string CSV_FILE_PATH = "./TestFiles/Test.csv";
const string TSV_FILE_PATH = "./TestFiles/Test.tsv";

const string CSV_ENCLOSE_ALL_FILE_PATH = "./TestFiles/Test_ENCLOSE_ALL.csv";
const string TSV_ENCLOSE_ALL_FILE_PATH = "./TestFiles/Test_ENCLOSE_ALL.tsv";

const string CSV_ENCLOSE_NONE_FILE_PATH = "./TestFiles/Test_ENCLOSE_NONE.csv";
const string TSV_ENCLOSE_NONE_FILE_PATH = "./TestFiles/Test_ENCLOSE_NONE.tsv";

// 汎用ファイル
TextFile textFile_READ;
TextFile textFile_WRITE;
TextFile textFile_APPEND;

// デフォルト設定（必要な値のみエンクロージャで囲む）のCSV/TSV形式ファイル
TextFile textFile_READ_CSV;
TextFile textFile_WRITE_CSV;
TextFile textFile_READ_TSV;
TextFile textFile_WRITE_TSV;

// 全てエンクロージャで囲む設定のCSV/TSV形式ファイル
TextFile textFile_READ_CSV_ENCLOSE_ALL;
TextFile textFile_WRITE_CSV_ENCLOSE_ALL;
TextFile textFile_READ_TSV_ENCLOSE_ALL;
TextFile textFile_WRITE_TSV_ENCLOSE_ALL;

// 一切エンクロージャで囲わない設定のCSV/TSV形式ファイル
TextFile textFile_READ_CSV_ENCLOSE_NONE;
TextFile textFile_WRITE_CSV_ENCLOSE_NONE;
TextFile textFile_READ_TSV_ENCLOSE_NONE;
TextFile textFile_WRITE_TSV_ENCLOSE_NONE;


test();


void test(){

	if(!exists(TEST_DIR_PATH) || !isdir(TEST_DIR_PATH)){
		alert("open.file.TextFileTest: テスト用ディレクトリ " + TEST_DIR_PATH + " が見つかりません。実行時のカレントディレクトリ直下に作成して下さい。");
		return;
	}

	// 改行コード判定テスト
	testGetEndOfLineCode();

	// 汎用ファイル書き込みテスト
	testOpenTextFile_WRITE();
	testWriteln_WRITE();
	testClose_WRITE();

	// 汎用ファイル追記テスト
	testOpenTextFile_APPEND();
	testWriteln_APPEND();
	testClose_APPEND();

	// 汎用ファイル読み込みテスト
	testOpenTextFile_READ();
	testCountln_READ();
	testLoadln_READ();
	testClose_READ();
	testOpenTextFile_READ();
	testReadln_READ();
	testClose_READ();

	// CSV（デフォルト設定）書き込みテスト
	testOpenTextFile_WRITE_CSV();
	testWriteln_WRITE_CSV();
	testClose_WRITE_CSV();

	// CSV（デフォルト設定）読み込みテスト
	testOpenTextFile_READ_CSV();
	testCountln_READ_CSV();
	testLoadln_READ_CSV();
	testClose_READ_CSV();
	testOpenTextFile_READ_CSV();
	testReadln_READ_CSV();
	testClose_READ_CSV();

	// TSV（デフォルト設定）書き込みテスト
	testOpenTextFile_WRITE_TSV();
	testWriteln_WRITE_TSV();
	testClose_WRITE_TSV();

	// TSV（デフォルト設定）読み込みテスト
	testOpenTextFile_READ_TSV();
	testCountln_READ_TSV();
	testLoadln_READ_TSV();
	testClose_READ_TSV();
	testOpenTextFile_READ_TSV();
	testReadln_READ_TSV();
	testClose_READ_TSV();



	// CSV（全てエンクロージャで囲む設定）書き込みテスト
	testOpenTextFile_WRITE_CSV_ENCLOSE_ALL();
	testWriteln_WRITE_CSV_ENCLOSE_ALL();
	testClose_WRITE_CSV_ENCLOSE_ALL();

	// CSV（全てエンクロージャで囲む設定）読み込みテスト
	testOpenTextFile_READ_CSV_ENCLOSE_ALL();
	testCountln_READ_CSV_ENCLOSE_ALL();
	testLoadln_READ_CSV_ENCLOSE_ALL();
	testClose_READ_CSV_ENCLOSE_ALL();
	testOpenTextFile_READ_CSV_ENCLOSE_ALL();
	testReadln_READ_CSV_ENCLOSE_ALL();
	testClose_READ_CSV_ENCLOSE_ALL();



	// TSV（全てエンクロージャで囲む設定）書き込みテスト
	testOpenTextFile_WRITE_TSV_ENCLOSE_ALL();
	testWriteln_WRITE_TSV_ENCLOSE_ALL();
	testClose_WRITE_TSV_ENCLOSE_ALL();

	// TSV（全てエンクロージャで囲む設定）読み込みテスト
	testOpenTextFile_READ_TSV_ENCLOSE_ALL();
	testCountln_READ_TSV_ENCLOSE_ALL();
	testLoadln_READ_TSV_ENCLOSE_ALL();
	testClose_READ_TSV_ENCLOSE_ALL();
	testOpenTextFile_READ_TSV_ENCLOSE_ALL();
	testReadln_READ_TSV_ENCLOSE_ALL();
	testClose_READ_TSV_ENCLOSE_ALL();



	// CSV（一切エンクロージャで囲まない設定）書き込みテスト
	testOpenTextFile_WRITE_CSV_ENCLOSE_NONE();
	testWriteln_WRITE_CSV_ENCLOSE_NONE();
	testClose_WRITE_CSV_ENCLOSE_NONE();

	// CSV（一切エンクロージャで囲まない設定）読み込みテスト
	testOpenTextFile_READ_CSV_ENCLOSE_NONE();
	testCountln_READ_CSV_ENCLOSE_NONE();
	testLoadln_READ_CSV_ENCLOSE_NONE();
	testClose_READ_CSV_ENCLOSE_NONE();
	testOpenTextFile_READ_CSV_ENCLOSE_NONE();
	testReadln_READ_CSV_ENCLOSE_NONE();
	testClose_READ_CSV_ENCLOSE_NONE();



	// TSV（一切エンクロージャで囲まない設定）書き込みテスト
	testOpenTextFile_WRITE_TSV_ENCLOSE_NONE();
	testWriteln_WRITE_TSV_ENCLOSE_NONE();
	testClose_WRITE_TSV_ENCLOSE_NONE();

	// TSV（一切エンクロージャで囲まない設定）読み込みテスト
	testOpenTextFile_READ_TSV_ENCLOSE_NONE();
	testCountln_READ_TSV_ENCLOSE_NONE();
	testLoadln_READ_TSV_ENCLOSE_NONE();
	testClose_READ_TSV_ENCLOSE_NONE();
	testOpenTextFile_READ_TSV_ENCLOSE_NONE();
	testReadln_READ_TSV_ENCLOSE_NONE();
	testClose_READ_TSV_ENCLOSE_NONE();


	println("open.file.TextFile: OK.");
}



// ==================================================
// 改行コードの取得テスト
// ==================================================

void testGetEndOfLineCode(){

	// テストファイルの書き出し
	int out = NULL;
	out = open(CR_FILE_PATH, "w");
	write(out, "a" + CR + "b" + CR + "c" + CR + "d" + CR + "e");
	close(out);
	out = open(LF_FILE_PATH, "w");
	write(out, "a" + LF + "b" + LF + "c" + LF + "d" + LF + "e");
	close(out);
	out = open(CRLF_FILE_PATH, "w");
	write(out, "a" + CR+LF + "b" + CR+LF + "c" + CR+LF + "d" + CR+LF + "e");
	close(out);

	// CR+LF の取得テスト
	TextFile textFileCRLF = openTextFile(CRLF_FILE_PATH, TextFile.READ, textEncoding);
	string eolCRLF = getEndOfLineCode(textFileCRLF);
	assert(eolCRLF == System.CR+System.LF);
	close(textFileCRLF);

	// CR の取得テスト
	TextFile textFileCR = openTextFile(CR_FILE_PATH, TextFile.READ, textEncoding);
	string eolCR = getEndOfLineCode(textFileCR);
	assert(eolCR == System.CR);
	close(textFileCR);

	// LF の取得テスト
	TextFile textFileLF = openTextFile(LF_FILE_PATH, TextFile.READ, textEncoding);
	string eolLF = getEndOfLineCode(textFileLF);
	assert(eolLF == System.LF);
	close(textFileLF);

}



// ==================================================
// 汎用ファイルテスト
// ==================================================

void testOpenTextFile_WRITE(){
	textFile_WRITE = openTextFile(GENERAL_FILE_PATH, TextFile.WRITE, textEncoding);
}

void testClose_WRITE(){
	close(textFile_WRITE);
}

void testWriteln_WRITE(){
	const string CRLF = System.CR + System.LF;
	TextFile.writeln(textFile_WRITE, "123 456	7890");
	TextFile.writeln(textFile_WRITE, "abc\"de" + CRLF + "fg,hij");
}

void testOpenTextFile_APPEND(){
	textFile_APPEND = openTextFile(GENERAL_FILE_PATH, TextFile.APPEND, textEncoding);
}

void testClose_APPEND(){
	close(textFile_APPEND);
}

void testWriteln_APPEND(){
	const string CRLF = System.CR + System.LF;
	TextFile.writeln(textFile_APPEND, "AB\"\"\"CDE" + CRLF + "FGHIJ, , , ,\t,\t,\t");
	TextFile.writeln(textFile_APPEND, "\"\"\"あいうえお" + CRLF + "かきくけこ\"\"\"");
}

void testOpenTextFile_READ(){
	textFile_READ = openTextFile(GENERAL_FILE_PATH, TextFile.READ, textEncoding);
}

void testClose_READ(){
	close(textFile_READ);
}

void testCountln_READ(){
	int lineN = countln(textFile_READ);
	assert(lineN == 7);
}

void testLoadln_READ(){
	string line;
	line = loadln(textFile_READ);
	assert(line == "123 456	7890");
	line = loadln(textFile_READ);
	assert(line == "abc\"de");
	line = loadln(textFile_READ);
	assert(line == "fg,hij");
	line = loadln(textFile_READ);
	assert(line == "AB\"\"\"CDE");
	line = loadln(textFile_READ);
	assert(line == "FGHIJ, , , ,\t,\t,\t");
	line = loadln(textFile_READ);
	assert(line == "\"\"\"あいうえお");
	line = loadln(textFile_READ);
	assert(line == "かきくけこ\"\"\"");
}


void testReadln_READ(){
	string line[];

	line = readln(textFile_READ);
	assert(length(line, 0) == 1);
	assert(line[0] == "123 456	7890");

	line = readln(textFile_READ);
	assert(length(line, 0) == 1);
	assert(line[0] == "abc\"de");

	line = readln(textFile_READ);
	assert(length(line, 0) == 1);
	assert(line[0] == "fg,hij");

	line = readln(textFile_READ);
	assert(length(line, 0) == 1);
	assert(line[0] == "AB\"\"\"CDE");

	line = readln(textFile_READ);
	assert(length(line, 0) == 1);
	assert(line[0] == "FGHIJ, , , ,\t,\t,\t");

	line = readln(textFile_READ);
	assert(length(line, 0) == 1);
	assert(line[0] == "\"\"\"あいうえお");

	line = readln(textFile_READ);
	assert(length(line, 0) == 1);
	assert(line[0] == "かきくけこ\"\"\"");
}


// ==================================================
// デフォルト設定（必要な値のみエンクロージャで囲む）CSVテスト
// ==================================================


void testOpenTextFile_WRITE_CSV(){
	textFile_WRITE_CSV = openTextFile(CSV_FILE_PATH, TextFile.WRITE_CSV, textEncoding);
}

void testClose_WRITE_CSV(){
	close(textFile_WRITE_CSV);
}

void testWriteln_WRITE_CSV(){
	const string CRLF = System.CR + System.LF;
	writeln(textFile_WRITE_CSV, "11111", "22222", "333"+CRLF+"33", "44444", "55555");
	writeln(textFile_WRITE_CSV, "66666", "77"+CRLF+"777", "88888", "99"+CRLF+"999", "00000", "aaaaa");
	writeln(textFile_WRITE_CSV, "bbbbb", "ccccc", "ddddd");
	writeln(textFile_WRITE_CSV, "eeeee", "ff\"fff", "ggggg");
	writeln(textFile_WRITE_CSV, "hhhhh", "ii"+CRLF+"iii", "jjjjj");
	writeln(textFile_WRITE_CSV, "\"\"\"kkkkk", "\"\"\"lllll\"\"", "mm\"\"\"\"\"mmm\"\"\"");
	writeln(textFile_WRITE_CSV, "nnnnn", "ooooo", "ppp"+CRLF+"pp", "qqqqq", "rrrrr");
}



void testOpenTextFile_READ_CSV(){
	textFile_READ_CSV = openTextFile(CSV_FILE_PATH, TextFile.READ_CSV, textEncoding);
}

void testClose_READ_CSV(){
	close(textFile_READ_CSV);
}

void testCountln_READ_CSV(){
	int lineN = countln(textFile_READ_CSV);
	assert(lineN == 7);
}

void testLoadln_READ_CSV(){
	string line;
	const string CRLF = System.CR + System.LF;
	line = loadln(textFile_READ_CSV);
	assert(line == "11111,22222,\"333" + CRLF + "33\",44444,55555");
	line = loadln(textFile_READ_CSV);
	assert(line == "66666,\"77" + CRLF + "777\",88888,\"99" + CRLF + "999\",00000,aaaaa");
	line = loadln(textFile_READ_CSV);
	assert(line == "bbbbb,ccccc,ddddd");
	line = loadln(textFile_READ_CSV);
	assert(line == "eeeee,\"ff\"\"fff\",ggggg");
	line = loadln(textFile_READ_CSV);
	assert(line == "hhhhh,\"ii" + CRLF + "iii\",jjjjj");
	line = loadln(textFile_READ_CSV);
	assert(line == "\"\"\"\"\"\"\"kkkkk\",\"\"\"\"\"\"\"lllll\"\"\"\"\",\"mm\"\"\"\"\"\"\"\"\"\"mmm\"\"\"\"\"\"\"");
	line = loadln(textFile_READ_CSV);
	assert(line == "nnnnn,ooooo,\"ppp" + EOL + "pp\",qqqqq,rrrrr");
}


void testReadln_READ_CSV(){
	string value[];
	const string CRLF = System.CR + System.LF;

	value = readln(textFile_READ_CSV);
	assert(length(value,0) == 5);
	assert(value[0] == "11111");
	assert(value[1] == "22222");
	assert(value[2] == "333" + CRLF + "33");
	assert(value[3] == "44444");
	assert(value[4] == "55555");

	value = readln(textFile_READ_CSV);
	assert(length(value,0) == 6);
	assert(value[0] == "66666");
	assert(value[1] == "77" + CRLF + "777");
	assert(value[2] == "88888");
	assert(value[3] == "99" + CRLF + "999");
	assert(value[4] == "00000");
	assert(value[5] == "aaaaa");

	value = readln(textFile_READ_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "bbbbb");
	assert(value[1] == "ccccc");
	assert(value[2] == "ddddd");

	value = readln(textFile_READ_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "eeeee");
	assert(value[1] == "ff\"fff");
	assert(value[2] == "ggggg");

	value = readln(textFile_READ_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "hhhhh");
	assert(value[1] == "ii" + CRLF + "iii");
	assert(value[2] == "jjjjj");

	value = readln(textFile_READ_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "\"\"\"kkkkk");
	assert(value[1] == "\"\"\"lllll\"\"");
	assert(value[2] == "mm\"\"\"\"\"mmm\"\"\"");

	value = readln(textFile_READ_CSV);
	assert(length(value,0) == 5);
	assert(value[0] == "nnnnn");
	assert(value[1] == "ooooo");
	assert(value[2] == "ppp" + CRLF + "pp");
	assert(value[3] == "qqqqq");
	assert(value[4] == "rrrrr");
}








// ==================================================
// デフォルト設定（必要な値のみエンクロージャで囲む）のTSVテスト
// ==================================================


void testOpenTextFile_WRITE_TSV(){
	textFile_WRITE_CSV = openTextFile(TSV_FILE_PATH, TextFile.WRITE_TSV, textEncoding);
}

void testClose_WRITE_TSV(){
	close(textFile_WRITE_CSV);
}

void testWriteln_WRITE_TSV(){
	const string CRLF = System.CR + System.LF;
	writeln(textFile_WRITE_CSV, "11111", "22222", "333"+CRLF+"33", "44444", "55555");
	writeln(textFile_WRITE_CSV, "66666", "77"+CRLF+"777", "88888", "99"+CRLF+"999", "00000", "aaaaa");
	writeln(textFile_WRITE_CSV, "bbbbb", "ccccc", "ddddd");
	writeln(textFile_WRITE_CSV, "eeeee", "ff\"fff", "ggggg");
	writeln(textFile_WRITE_CSV, "hhhhh", "ii"+CRLF+"iii", "jjjjj");
	writeln(textFile_WRITE_CSV, "\"\"\"kkkkk", "\"\"\"lllll\"\"", "mm\"\"\"\"\"mmm\"\"\"");
	writeln(textFile_WRITE_CSV, "nnnnn", "ooooo", "ppp"+CRLF+"pp", "qqqqq", "rrrrr");
}


void testOpenTextFile_READ_TSV(){
	textFile_WRITE_CSV = openTextFile(TSV_FILE_PATH, TextFile.READ_TSV, textEncoding);
}

void testClose_READ_TSV(){
	close(textFile_WRITE_CSV);
}

void testCountln_READ_TSV(){
	int lineN = countln(textFile_WRITE_CSV);
	assert(lineN == 7);
}


void testLoadln_READ_TSV(){
	string line;
	const string CRLF = System.CR + System.LF;
	line = loadln(textFile_WRITE_CSV);
	assert(line == "11111\t22222\t\"333" + CRLF + "33\"\t44444\t55555");
	line = loadln(textFile_WRITE_CSV);
	assert(line == "66666\t\"77" + CRLF + "777\"\t88888\t\"99" + CRLF + "999\"\t00000\taaaaa");
	line = loadln(textFile_WRITE_CSV);
	assert(line == "bbbbb\tccccc\tddddd");
	line = loadln(textFile_WRITE_CSV);
	assert(line == "eeeee\t\"ff\"\"fff\"\tggggg");
	line = loadln(textFile_WRITE_CSV);
	assert(line == "hhhhh\t\"ii" + CRLF + "iii\"\tjjjjj");
	line = loadln(textFile_WRITE_CSV);
	assert(line == "\"\"\"\"\"\"\"kkkkk\"\t\"\"\"\"\"\"\"lllll\"\"\"\"\"\t\"mm\"\"\"\"\"\"\"\"\"\"mmm\"\"\"\"\"\"\"");
	line = loadln(textFile_WRITE_CSV);
	assert(line == "nnnnn\tooooo\t\"ppp" + EOL + "pp\"\tqqqqq\trrrrr");
}



void testReadln_READ_TSV(){
	string value[];
	const string CRLF = System.CR + System.LF;

	value = readln(textFile_WRITE_CSV);
	assert(length(value,0) == 5);
	assert(value[0] == "11111");
	assert(value[1] == "22222");
	assert(value[2] == "333" + CRLF + "33");
	assert(value[3] == "44444");
	assert(value[4] == "55555");

	value = readln(textFile_WRITE_CSV);
	assert(length(value,0) == 6);
	assert(value[0] == "66666");
	assert(value[1] == "77" + CRLF + "777");
	assert(value[2] == "88888");
	assert(value[3] == "99" + CRLF + "999");
	assert(value[4] == "00000");
	assert(value[5] == "aaaaa");

	value = readln(textFile_WRITE_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "bbbbb");
	assert(value[1] == "ccccc");
	assert(value[2] == "ddddd");

	value = readln(textFile_WRITE_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "eeeee");
	assert(value[1] == "ff\"fff");
	assert(value[2] == "ggggg");

	value = readln(textFile_WRITE_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "hhhhh");
	assert(value[1] == "ii" + CRLF + "iii");
	assert(value[2] == "jjjjj");

	value = readln(textFile_WRITE_CSV);
	assert(length(value,0) == 3);
	assert(value[0] == "\"\"\"kkkkk");
	assert(value[1] == "\"\"\"lllll\"\"");
	assert(value[2] == "mm\"\"\"\"\"mmm\"\"\"");

	value = readln(textFile_WRITE_CSV);
	assert(length(value,0) == 5);
	assert(value[0] == "nnnnn");
	assert(value[1] == "ooooo");
	assert(value[2] == "ppp" + CRLF + "pp");
	assert(value[3] == "qqqqq");
	assert(value[4] == "rrrrr");
}






// ==================================================
// 全てエンクロージャで囲む設定のCSVテスト
// ==================================================


void testOpenTextFile_WRITE_CSV_ENCLOSE_ALL(){
	textFile_WRITE_CSV_ENCLOSE_ALL = openTextFile(CSV_ENCLOSE_ALL_FILE_PATH, TextFile.WRITE_CSV, textEncoding);
	setEnclosure(textFile_WRITE_CSV_ENCLOSE_ALL, "\"", "\"", TextFile.ENCLOSE_ALL);
}

void testClose_WRITE_CSV_ENCLOSE_ALL(){
	close(textFile_WRITE_CSV_ENCLOSE_ALL);
}

void testWriteln_WRITE_CSV_ENCLOSE_ALL(){
	const string CRLF = System.CR + System.LF;
	writeln(textFile_WRITE_CSV_ENCLOSE_ALL, "11111", "22222", "333"+CRLF+"33", "44444", "55555");
	writeln(textFile_WRITE_CSV_ENCLOSE_ALL, "66666", "77"+CRLF+"777", "88888", "99"+CRLF+"999", "00000", "aaaaa");
	writeln(textFile_WRITE_CSV_ENCLOSE_ALL, "bbbbb", "ccccc", "ddddd");
	writeln(textFile_WRITE_CSV_ENCLOSE_ALL, "eeeee", "ff\"fff", "ggggg");
	writeln(textFile_WRITE_CSV_ENCLOSE_ALL, "hhhhh", "ii"+CRLF+"iii", "jjjjj");
	writeln(textFile_WRITE_CSV_ENCLOSE_ALL, "\"\"\"kkkkk", "\"\"\"lllll\"\"", "mm\"\"\"\"\"mmm\"\"\"");
	writeln(textFile_WRITE_CSV_ENCLOSE_ALL, "nnnnn", "ooooo", "ppp"+CRLF+"pp", "qqqqq", "rrrrr");
}



void testOpenTextFile_READ_CSV_ENCLOSE_ALL(){
	textFile_READ_CSV_ENCLOSE_ALL = openTextFile(CSV_ENCLOSE_ALL_FILE_PATH, TextFile.READ_CSV, textEncoding);
	setEnclosure(textFile_READ_CSV_ENCLOSE_ALL, "\"", "\"", TextFile.ENCLOSE_ALL);
}

void testClose_READ_CSV_ENCLOSE_ALL(){
	close(textFile_READ_CSV_ENCLOSE_ALL);
}

void testCountln_READ_CSV_ENCLOSE_ALL(){
	int lineN = countln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(lineN == 7);
}

void testLoadln_READ_CSV_ENCLOSE_ALL(){
	string line;
	const string CRLF = System.CR + System.LF;
	line = loadln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(line == "\"11111\",\"22222\",\"333" + CRLF + "33\",\"44444\",\"55555\"");
	line = loadln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(line == "\"66666\",\"77" + CRLF + "777\",\"88888\",\"99" + CRLF + "999\",\"00000\",\"aaaaa\"");
	line = loadln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(line == "\"bbbbb\",\"ccccc\",\"ddddd\"");
	line = loadln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(line == "\"eeeee\",\"ff\"\"fff\",\"ggggg\"");
	line = loadln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(line == "\"hhhhh\",\"ii" + CRLF + "iii\",\"jjjjj\"");
	line = loadln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(line == "\"\"\"\"\"\"\"kkkkk\",\"\"\"\"\"\"\"lllll\"\"\"\"\",\"mm\"\"\"\"\"\"\"\"\"\"mmm\"\"\"\"\"\"\"");
	line = loadln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(line == "\"nnnnn\",\"ooooo\",\"ppp" + EOL + "pp\",\"qqqqq\",\"rrrrr\"");
}


void testReadln_READ_CSV_ENCLOSE_ALL(){
	string value[];
	const string CRLF = System.CR + System.LF;

	value = readln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(length(value,0) == 5);
	assert(value[0] == "11111");
	assert(value[1] == "22222");
	assert(value[2] == "333" + CRLF + "33");
	assert(value[3] == "44444");
	assert(value[4] == "55555");

	value = readln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(length(value,0) == 6);
	assert(value[0] == "66666");
	assert(value[1] == "77" + CRLF + "777");
	assert(value[2] == "88888");
	assert(value[3] == "99" + CRLF + "999");
	assert(value[4] == "00000");
	assert(value[5] == "aaaaa");

	value = readln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "bbbbb");
	assert(value[1] == "ccccc");
	assert(value[2] == "ddddd");

	value = readln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "eeeee");
	assert(value[1] == "ff\"fff");
	assert(value[2] == "ggggg");

	value = readln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "hhhhh");
	assert(value[1] == "ii" + CRLF + "iii");
	assert(value[2] == "jjjjj");

	value = readln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "\"\"\"kkkkk");
	assert(value[1] == "\"\"\"lllll\"\"");
	assert(value[2] == "mm\"\"\"\"\"mmm\"\"\"");

	value = readln(textFile_READ_CSV_ENCLOSE_ALL);
	assert(length(value,0) == 5);
	assert(value[0] == "nnnnn");
	assert(value[1] == "ooooo");
	assert(value[2] == "ppp" + CRLF + "pp");
	assert(value[3] == "qqqqq");
	assert(value[4] == "rrrrr");
}




// ==================================================
// 全てエンクロージャで囲む設定のTSVテスト
// ==================================================


void testOpenTextFile_WRITE_TSV_ENCLOSE_ALL(){
	textFile_WRITE_TSV_ENCLOSE_ALL = openTextFile(TSV_ENCLOSE_ALL_FILE_PATH, TextFile.WRITE_TSV, textEncoding);
	setEnclosure(textFile_WRITE_TSV_ENCLOSE_ALL, "\"", "\"", TextFile.ENCLOSE_ALL);
}

void testClose_WRITE_TSV_ENCLOSE_ALL(){
	close(textFile_WRITE_TSV_ENCLOSE_ALL);
}

void testWriteln_WRITE_TSV_ENCLOSE_ALL(){
	const string CRLF = System.CR + System.LF;
	writeln(textFile_WRITE_TSV_ENCLOSE_ALL, "11111", "22222", "333"+CRLF+"33", "44444", "55555");
	writeln(textFile_WRITE_TSV_ENCLOSE_ALL, "66666", "77"+CRLF+"777", "88888", "99"+CRLF+"999", "00000", "aaaaa");
	writeln(textFile_WRITE_TSV_ENCLOSE_ALL, "bbbbb", "ccccc", "ddddd");
	writeln(textFile_WRITE_TSV_ENCLOSE_ALL, "eeeee", "ff\"fff", "ggggg");
	writeln(textFile_WRITE_TSV_ENCLOSE_ALL, "hhhhh", "ii"+CRLF+"iii", "jjjjj");
	writeln(textFile_WRITE_TSV_ENCLOSE_ALL, "\"\"\"kkkkk", "\"\"\"lllll\"\"", "mm\"\"\"\"\"mmm\"\"\"");
	writeln(textFile_WRITE_TSV_ENCLOSE_ALL, "nnnnn", "ooooo", "ppp"+CRLF+"pp", "qqqqq", "rrrrr");
}



void testOpenTextFile_READ_TSV_ENCLOSE_ALL(){
	textFile_READ_TSV_ENCLOSE_ALL = openTextFile(TSV_ENCLOSE_ALL_FILE_PATH, TextFile.READ_TSV, textEncoding);
	setEnclosure(textFile_READ_TSV_ENCLOSE_ALL, "\"", "\"", TextFile.ENCLOSE_ALL);
}

void testClose_READ_TSV_ENCLOSE_ALL(){
	close(textFile_READ_TSV_ENCLOSE_ALL);
}

void testCountln_READ_TSV_ENCLOSE_ALL(){
	int lineN = countln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(lineN == 7);
}

void testLoadln_READ_TSV_ENCLOSE_ALL(){
	string line;
	const string CRLF = System.CR + System.LF;
	line = loadln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(line == "\"11111\"\t\"22222\"\t\"333" + CRLF + "33\"\t\"44444\"\t\"55555\"");
	line = loadln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(line == "\"66666\"\t\"77" + CRLF + "777\"\t\"88888\"\t\"99" + CRLF + "999\"\t\"00000\"\t\"aaaaa\"");
	line = loadln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(line == "\"bbbbb\"\t\"ccccc\"\t\"ddddd\"");
	line = loadln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(line == "\"eeeee\"\t\"ff\"\"fff\"\t\"ggggg\"");
	line = loadln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(line == "\"hhhhh\"\t\"ii" + CRLF + "iii\"\t\"jjjjj\"");
	line = loadln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(line == "\"\"\"\"\"\"\"kkkkk\"\t\"\"\"\"\"\"\"lllll\"\"\"\"\"\t\"mm\"\"\"\"\"\"\"\"\"\"mmm\"\"\"\"\"\"\"");
	line = loadln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(line == "\"nnnnn\"\t\"ooooo\"\t\"ppp" + EOL + "pp\"\t\"qqqqq\"\t\"rrrrr\"");
}


void testReadln_READ_TSV_ENCLOSE_ALL(){
	string value[];
	const string CRLF = System.CR + System.LF;

	value = readln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(length(value,0) == 5);
	assert(value[0] == "11111");
	assert(value[1] == "22222");
	assert(value[2] == "333" + CRLF + "33");
	assert(value[3] == "44444");
	assert(value[4] == "55555");

	value = readln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(length(value,0) == 6);
	assert(value[0] == "66666");
	assert(value[1] == "77" + CRLF + "777");
	assert(value[2] == "88888");
	assert(value[3] == "99" + CRLF + "999");
	assert(value[4] == "00000");
	assert(value[5] == "aaaaa");

	value = readln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "bbbbb");
	assert(value[1] == "ccccc");
	assert(value[2] == "ddddd");

	value = readln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "eeeee");
	assert(value[1] == "ff\"fff");
	assert(value[2] == "ggggg");

	value = readln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "hhhhh");
	assert(value[1] == "ii" + CRLF + "iii");
	assert(value[2] == "jjjjj");

	value = readln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(length(value,0) == 3);
	assert(value[0] == "\"\"\"kkkkk");
	assert(value[1] == "\"\"\"lllll\"\"");
	assert(value[2] == "mm\"\"\"\"\"mmm\"\"\"");

	value = readln(textFile_READ_TSV_ENCLOSE_ALL);
	assert(length(value,0) == 5);
	assert(value[0] == "nnnnn");
	assert(value[1] == "ooooo");
	assert(value[2] == "ppp" + CRLF + "pp");
	assert(value[3] == "qqqqq");
	assert(value[4] == "rrrrr");
}










// ==================================================
// 一切エンクロージャで囲わない設定のCSVテスト
// ==================================================


void testOpenTextFile_WRITE_CSV_ENCLOSE_NONE(){
	textFile_WRITE_CSV_ENCLOSE_NONE = openTextFile(CSV_ENCLOSE_NONE_FILE_PATH, TextFile.WRITE_CSV, textEncoding);
	setEnclosure(textFile_WRITE_CSV_ENCLOSE_NONE, "\"", "\"", TextFile.ENCLOSE_NONE);
}

void testClose_WRITE_CSV_ENCLOSE_NONE(){
	close(textFile_WRITE_CSV_ENCLOSE_NONE);
}

void testWriteln_WRITE_CSV_ENCLOSE_NONE(){
	const string CRLF = System.CR + System.LF;
	writeln(textFile_WRITE_CSV_ENCLOSE_NONE, "11111", "22222", "333"+CRLF+"33", "44444", "55555");
	writeln(textFile_WRITE_CSV_ENCLOSE_NONE, "66666", "77"+CRLF+"777", "88888", "99"+CRLF+"999", "00000", "aaaaa");
	writeln(textFile_WRITE_CSV_ENCLOSE_NONE, "bbbbb", "ccccc", "ddddd");
	writeln(textFile_WRITE_CSV_ENCLOSE_NONE, "eeeee", "ff\"fff", "ggggg");
	writeln(textFile_WRITE_CSV_ENCLOSE_NONE, "hhhhh", "ii"+CRLF+"iii", "jjjjj");
	writeln(textFile_WRITE_CSV_ENCLOSE_NONE, "\"\"\"kkkkk", "\"\"\"lllll\"\"", "mm\"\"\"\"\"mmm\"\"\"");
	writeln(textFile_WRITE_CSV_ENCLOSE_NONE, "nnnnn", "ooooo", "ppp"+CRLF+"pp", "qqqqq", "rrrrr");
}




void testOpenTextFile_READ_CSV_ENCLOSE_NONE(){
	textFile_READ_CSV_ENCLOSE_NONE = openTextFile(CSV_ENCLOSE_NONE_FILE_PATH, TextFile.READ_CSV, textEncoding);
	setEnclosure(textFile_READ_CSV_ENCLOSE_NONE, "\"", "\"", TextFile.ENCLOSE_NONE);
}

void testClose_READ_CSV_ENCLOSE_NONE(){
	close(textFile_READ_CSV_ENCLOSE_NONE);
}

void testCountln_READ_CSV_ENCLOSE_NONE(){
	int lineN = countln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(lineN == 12);
}

void testLoadln_READ_CSV_ENCLOSE_NONE(){
	string line;
	const string CRLF = System.CR + System.LF;
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "11111,22222,333");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "33,44444,55555");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "66666,77");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "777,88888,99");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "999,00000,aaaaa");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "bbbbb,ccccc,ddddd");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "eeeee,ff\"fff,ggggg");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "hhhhh,ii");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "iii,jjjjj");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "\"\"\"kkkkk,\"\"\"lllll\"\",mm\"\"\"\"\"mmm\"\"\"");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "nnnnn,ooooo,ppp");
	line = loadln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(line == "pp,qqqqq,rrrrr");
}


void testReadln_READ_CSV_ENCLOSE_NONE(){
	string value[];
	const string CRLF = System.CR + System.LF;

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "11111");
	assert(value[1] == "22222");
	assert(value[2] == "333");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "33");
	assert(value[1] == "44444");
	assert(value[2] == "55555");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 2);
	assert(value[0] == "66666");
	assert(value[1] == "77");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "777");
	assert(value[1] == "88888");
	assert(value[2] == "99");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "999");
	assert(value[1] == "00000");
	assert(value[2] == "aaaaa");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "bbbbb");
	assert(value[1] == "ccccc");
	assert(value[2] == "ddddd");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "eeeee");
	assert(value[1] == "ff\"fff");
	assert(value[2] == "ggggg");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 2);
	assert(value[0] == "hhhhh");
	assert(value[1] == "ii");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 2);
	assert(value[0] == "iii");
	assert(value[1] == "jjjjj");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "\"\"\"kkkkk");
	assert(value[1] == "\"\"\"lllll\"\"");
	assert(value[2] == "mm\"\"\"\"\"mmm\"\"\"");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "nnnnn");
	assert(value[1] == "ooooo");
	assert(value[2] == "ppp");

	value = readln(textFile_READ_CSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "pp");
	assert(value[1] == "qqqqq");
	assert(value[2] == "rrrrr");
}







// ==================================================
// 一切エンクロージャで囲わない設定のTSVテスト
// ==================================================


void testOpenTextFile_WRITE_TSV_ENCLOSE_NONE(){
	textFile_WRITE_TSV_ENCLOSE_NONE = openTextFile(TSV_ENCLOSE_NONE_FILE_PATH, TextFile.WRITE_TSV, textEncoding);
	setEnclosure(textFile_WRITE_TSV_ENCLOSE_NONE, "\"", "\"", TextFile.ENCLOSE_NONE);
}

void testClose_WRITE_TSV_ENCLOSE_NONE(){
	close(textFile_WRITE_TSV_ENCLOSE_NONE);
}

void testWriteln_WRITE_TSV_ENCLOSE_NONE(){
	const string CRLF = System.CR + System.LF;
	writeln(textFile_WRITE_TSV_ENCLOSE_NONE, "11111", "22222", "333"+CRLF+"33", "44444", "55555");
	writeln(textFile_WRITE_TSV_ENCLOSE_NONE, "66666", "77"+CRLF+"777", "88888", "99"+CRLF+"999", "00000", "aaaaa");
	writeln(textFile_WRITE_TSV_ENCLOSE_NONE, "bbbbb", "ccccc", "ddddd");
	writeln(textFile_WRITE_TSV_ENCLOSE_NONE, "eeeee", "ff\"fff", "ggggg");
	writeln(textFile_WRITE_TSV_ENCLOSE_NONE, "hhhhh", "ii"+CRLF+"iii", "jjjjj");
	writeln(textFile_WRITE_TSV_ENCLOSE_NONE, "\"\"\"kkkkk", "\"\"\"lllll\"\"", "mm\"\"\"\"\"mmm\"\"\"");
	writeln(textFile_WRITE_TSV_ENCLOSE_NONE, "nnnnn", "ooooo", "ppp"+CRLF+"pp", "qqqqq", "rrrrr");
}




void testOpenTextFile_READ_TSV_ENCLOSE_NONE(){
	textFile_READ_TSV_ENCLOSE_NONE = openTextFile(TSV_ENCLOSE_NONE_FILE_PATH, TextFile.READ_TSV, textEncoding);
	setEnclosure(textFile_READ_TSV_ENCLOSE_NONE, "\"", "\"", TextFile.ENCLOSE_NONE);
}

void testClose_READ_TSV_ENCLOSE_NONE(){
	close(textFile_READ_TSV_ENCLOSE_NONE);
}

void testCountln_READ_TSV_ENCLOSE_NONE(){
	int lineN = countln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(lineN == 12);
}

void testLoadln_READ_TSV_ENCLOSE_NONE(){
	string line;
	const string CRLF = System.CR + System.LF;
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "11111\t22222\t333");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "33\t44444\t55555");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "66666\t77");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "777\t88888\t99");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "999\t00000\taaaaa");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "bbbbb\tccccc\tddddd");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "eeeee\tff\"fff\tggggg");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "hhhhh\tii");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "iii\tjjjjj");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "\"\"\"kkkkk\t\"\"\"lllll\"\"\tmm\"\"\"\"\"mmm\"\"\"");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "nnnnn\tooooo\tppp");
	line = loadln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(line == "pp\tqqqqq\trrrrr");
}


void testReadln_READ_TSV_ENCLOSE_NONE(){
	string value[];
	const string CRLF = System.CR + System.LF;

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "11111");
	assert(value[1] == "22222");
	assert(value[2] == "333");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "33");
	assert(value[1] == "44444");
	assert(value[2] == "55555");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 2);
	assert(value[0] == "66666");
	assert(value[1] == "77");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "777");
	assert(value[1] == "88888");
	assert(value[2] == "99");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "999");
	assert(value[1] == "00000");
	assert(value[2] == "aaaaa");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "bbbbb");
	assert(value[1] == "ccccc");
	assert(value[2] == "ddddd");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "eeeee");
	assert(value[1] == "ff\"fff");
	assert(value[2] == "ggggg");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 2);
	assert(value[0] == "hhhhh");
	assert(value[1] == "ii");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 2);
	assert(value[0] == "iii");
	assert(value[1] == "jjjjj");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "\"\"\"kkkkk");
	assert(value[1] == "\"\"\"lllll\"\"");
	assert(value[2] == "mm\"\"\"\"\"mmm\"\"\"");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "nnnnn");
	assert(value[1] == "ooooo");
	assert(value[2] == "ppp");

	value = readln(textFile_READ_TSV_ENCLOSE_NONE);
	assert(length(value,0) == 3);
	assert(value[0] == "pp");
	assert(value[1] == "qqqqq");
	assert(value[2] == "rrrrr");
}



